#!/usr/bin/env python3
"""
Basic LLM Router + Simple Embedder + RAG Foundation Demo –¥–ª—è mega_agent_pro.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. LLM Router - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
2. Simple Embedder - —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
3. Basic RAG - –ø–æ–ª–Ω—ã–π RAG pipeline —Å –ø–æ–∏—Å–∫–æ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
5. –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤

–ó–∞–ø—É—Å–∫:
    python basic_llm_rag_demo.py
"""

import asyncio
import logging
from datetime import datetime

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from core.llm_router import (
    create_llm_router,
    LLMRequest,
    ModelType,
    Priority
)

from core.simple_embedder import (
    create_simple_embedder,
    EmbedRequest,
    EmbedProviderType
)

from core.basic_rag import (
    create_basic_rag,
    Document,
    RAGQuery,
    SearchType,
    ChunkingStrategy
)


async def llm_router_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LLM Router"""
    print("ü§ñ === LLM Router Demo ===")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    router_config = {
        "routing_rules": {
            "model_preferences": {
                "chat": ["openai", "gemini", "claude", "mock"],
                "code": ["openai", "claude", "mock"],
                "vision": ["openai", "gemini"]
            }
        },
        "fallback_strategy": "round_robin",
        "load_balancing": True,
        "providers": {
            "openai": {"enabled": True, "api_key": "demo-key"},
            "gemini": {"enabled": True, "api_key": "demo-key"},
            "claude": {"enabled": True, "api_key": "demo-key"},
            "mock": {"enabled": True}
        }
    }

    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    router = await create_llm_router(router_config)

    print(f"   üìä –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(router.providers)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    health = await router.health_check_all()
    healthy_count = sum(1 for is_healthy in health.values() if is_healthy)
    print(f"   üè• –ó–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {healthy_count}/{len(health)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    test_requests = [
        {
            "messages": [{"role": "user", "content": "Default chat request to test new models"}],
            "model_type": ModelType.CHAT,
            "priority": Priority.NORMAL
        },
        {
            "messages": [{"role": "user", "content": "Request for GPT-5 specifically"}],
            "model_type": ModelType.CHAT,
            "provider_preference": ["openai"]
        },
        {
            "messages": [{"role": "user", "content": "Request for Gemini 2.5 Pro specifically"}],
            "model_type": ModelType.CHAT,
            "provider_preference": ["gemini"]
        },
        {
            "messages": [{"role": "user", "content": "Request for Claude 4 Opus specifically"}],
            "model_type": ModelType.CHAT,
            "provider_preference": ["claude"]
        },
        {
            "messages": [{"role": "user", "content": "Write a Python function to calculate the factorial of a number"}],
            "model_type": ModelType.CODE,
            "priority": Priority.HIGH
        }
    ]

    print("\n   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∫ –Ω–æ–≤—ã–º –º–æ–¥–µ–ª—è–º:")

    for i, request_data in enumerate(test_requests, 1):
        request = LLMRequest(**request_data)
        print(f"\n   --- –ó–∞–ø—Ä–æ—Å {i}: {request.messages[0]['content']} ---")
        if request.provider_preference:
            print(f"   Provider Preference: {request.provider_preference}")
            
        response = await router.route_request(request)

        status_icon = "‚úÖ" if response.success else "‚ùå"
        print(f"   {status_icon} –û—Ç–≤–µ—Ç –æ—Ç: {response.provider.value} ({response.model})")
        print(f"      –ó–∞–¥–µ—Ä–∂–∫–∞: {response.latency:.2f}—Å, –¢–æ–∫–µ–Ω—ã: {response.tokens_used}")
        print(f"      –û—Ç–≤–µ—Ç: {response.content}")


    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    stats = await router.get_providers_stats()
    print(f"\n\n   üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")

    for provider, provider_stats in stats.items():
        print(f"   üìà {provider}: {provider_stats.success_rate:.1f}% —É—Å–ø–µ—Ö, "
              f"{provider_stats.total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤, "
              f"—Å—Ä–µ–¥. –∑–∞–¥–µ—Ä–∂–∫–∞: {provider_stats.average_latency:.2f}—Å")

    return router



async def simple_embedder_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Simple Embedder"""
    print("\nüß† === Simple Embedder Demo ===")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è embedder
    embedder_config = {
        "default_provider": EmbedProviderType.OPENAI,
        "enable_cache": True,
        "cache_size": 1000,
        "providers": {
            "openai": {"enabled": True, "api_key": "demo-key"},
            "gemini": {"enabled": True, "api_key": "demo-key"},
            "local": {"enabled": True},
            "mock": {"enabled": True}
        }
    }

    # –°–æ–∑–¥–∞–µ–º embedder
    embedder = await create_simple_embedder(embedder_config)

    print(f"   üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(embedder.providers)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    health = await embedder.health_check_all()
    healthy_count = sum(1 for is_healthy in health.values() if is_healthy)
    print(f"   üè• –ó–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {healthy_count}/{len(health)}")

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        "Python - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è data science",
        "–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞",
        "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
        "RAG —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–±–∏–Ω–∏—Ä—É—é—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞"
    ]

    print(f"\n   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤:")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    for provider_type in [EmbedProviderType.OPENAI, EmbedProviderType.GEMINI, EmbedProviderType.LOCAL, EmbedProviderType.MOCK]:
        try:
            request = EmbedRequest(texts=test_texts[:2])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            response = await embedder.embed(request, provider_type)

            status_icon = "‚úÖ" if response.success else "‚ùå"
            print(f"   {status_icon} {provider_type.value}: "
                  f"{len(response.embeddings)} –≤–µ–∫—Ç–æ—Ä–æ–≤, dim={response.dimensions}")
            print(f"      –ó–∞–¥–µ—Ä–∂–∫–∞: {response.latency:.3f}—Å, –°—Ç–æ–∏–º–æ—Å—Ç—å: ${response.cost:.6f}")

        except Exception as e:
            print(f"   ‚ùå {provider_type.value}: –û—à–∏–±–∫–∞ - {str(e)[:50]}...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\n   üíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:")

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    request = EmbedRequest(texts=["–¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"])
    response1 = await embedder.embed(request)
    print(f"   üìù –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {response1.latency:.3f}—Å, –∫–µ—à: {response1.cached}")

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞)
    response2 = await embedder.embed(request)
    print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {response2.latency:.3f}—Å, –∫–µ—à: {response2.cached}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
    cache_stats = embedder.get_cache_stats()
    print(f"   üìä –ö–µ—à: {cache_stats['size']}/{cache_stats['max_size']} –∑–∞–ø–∏—Å–µ–π")

    return embedder


async def basic_rag_demo(embedder=None, llm_router=None):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Basic RAG"""
    print("\nüìö === Basic RAG Demo ===")

    # –°–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    rag = await create_basic_rag(embedder, llm_router)

    print(f"   üèóÔ∏è RAG —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
    print(f"      Embedder: {'‚úÖ' if embedder else '‚ùå'}")
    print(f"      LLM Router: {'‚úÖ' if llm_router else '‚ùå'}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    documents = [
        {
            "title": "–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "content": """
            –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –æ–±—É—á–∞—Ç—å—Å—è –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
            –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç: –æ–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º, –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è –∏ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º.

            –û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–∏–º–µ—Ä—ã –≤–∫–ª—é—á–∞—é—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—é.
            –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–∫–ª—é—á–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏.
            –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–π.
            """,
            "metadata": {"category": "AI/ML", "difficulty": "beginner"}
        },
        {
            "title": "Python –¥–ª—è Data Science",
            "content": """
            Python —Å—Ç–∞–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ data science –±–ª–∞–≥–æ–¥–∞—Ä—è –º–æ—â–Ω—ã–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º –∏ –ø—Ä–æ—Å—Ç–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É.
            –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤–∫–ª—é—á–∞—é—Ç: NumPy –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, Pandas –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏,
            Matplotlib –∏ Seaborn –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, Scikit-learn –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

            Jupyter Notebook –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∏–¥–µ–∞–ª—å–Ω—É—é –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
            Pandas DataFrame - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            """,
            "metadata": {"category": "programming", "difficulty": "intermediate"}
        },
        {
            "title": "–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "content": """
            –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –≤—ã—Å–æ–∫–æ—Ä–∞–∑–º–µ—Ä–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.
            –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ RAG –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.

            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç Pinecone, Weaviate, Chroma –∏ FAISS.
            –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ë–î –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π: L2, –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.

            –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –≤ –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö.
            """,
            "metadata": {"category": "databases", "difficulty": "advanced"}
        },
        {
            "title": "RAG —Å–∏—Å—Ç–µ–º—ã",
            "content": """
            RAG (Retrieval-Augmented Generation) - —ç—Ç–æ –ø–æ–¥—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.

            RAG pipeline –æ–±—ã—á–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç: –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
            —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞.

            –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ RAG: –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å–Ω–∏–∂–µ–Ω–∏–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π.
            RAG –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–Ω–æ-–æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.
            """,
            "metadata": {"category": "AI/ML", "difficulty": "advanced"}
        }
    ]

    print(f"\n   üìÑ –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    document_ids = []
    for doc in documents:
        doc_id = await rag.add_document(doc["title"], doc["content"], doc["metadata"])
        if doc_id:
            document_ids.append(doc_id)
            print(f"   ‚úÖ {doc['title']}: {doc_id[:8]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {doc['title']}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG
    stats = await rag.get_stats()
    print(f"\n   üìä RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"      –î–æ–∫—É–º–µ–Ω—Ç—ã: {stats['vector_store']['documents']}")
    print(f"      –ß–∞—Å—Ç–∏ (chunks): {stats['vector_store']['total_chunks']}")
    print(f"      –≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {stats['vector_store']['total_embeddings']}")
    print(f"      –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–±–∏–≤–∫–∏: {stats['chunking_strategy']}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞
    test_queries = [
        {
            "query": "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "search_type": "semantic"
        },
        {
            "query": "Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "search_type": "semantic"
        },
        {
            "query": "–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö FAISS",
            "search_type": "keyword"
        },
        {
            "query": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç RAG —Å–∏—Å—Ç–µ–º—ã?",
            "search_type": "hybrid"
        }
    ]

    print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∑–∞–ø—Ä–æ—Å—ã:")

    for i, test_query in enumerate(test_queries, 1):
        response = await rag.search(
            test_query["query"],
            max_results=3,
            search_type=test_query["search_type"]
        )

        status_icon = "‚úÖ" if response.success else "‚ùå"
        print(f"\n   {status_icon} –ó–∞–ø—Ä–æ—Å {i} ({test_query['search_type']}): {test_query['query']}")
        print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}, –í—Ä–µ–º—è: {response.latency:.2f}—Å")
        print(f"      –û—Ç–≤–µ—Ç: {response.answer[:100]}...")

        if response.sources:
            print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(response.sources)}):")
            for j, source in enumerate(response.sources[:2], 1):
                print(f"        {j}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source.score:.2f}")
                print(f"           {source.chunk.content[:80]}...")

    return rag


async def integration_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüåü === Integration Demo ===")

    print("üîÑ –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")

    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    llm_router = await create_llm_router({
        "providers": {
            "openai": {"enabled": True},
            "gemini": {"enabled": True},
            "mock": {"enabled": True}
        }
    })

    embedder = await create_simple_embedder({
        "providers": {
            "openai": {"enabled": True},
            "gemini": {"enabled": True},
            "mock": {"enabled": True}
        }
    })

    # –°–æ–∑–¥–∞–µ–º RAG —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    rag = await create_basic_rag(embedder, llm_router)

    print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –°–ª–æ–∂–Ω—ã–π RAG workflow
    print("\n   üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–∂–Ω—ã–π RAG workflow:")

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    legal_doc = """
    –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ –†–æ—Å—Å–∏–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏.
    –û—Å–Ω–æ–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —è–≤–ª—è–µ—Ç—Å—è –¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§.

    –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 40 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–ø—É—Å–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 28 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π.
    –ü—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å 2 –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–º –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –∏–Ω–æ–µ.

    –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É –Ω–µ —Ä–µ–∂–µ —á–µ–º –∫–∞–∂–¥—ã–µ –ø–æ–ª–º–µ—Å—è—Ü–∞.
    –ü—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15 –¥–Ω–µ–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É.
    """

    doc_id = await rag.add_document(
        "–û—Å–Ω–æ–≤—ã —Ç—Ä—É–¥–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∞ –†–§",
        legal_doc,
        {"domain": "legal", "jurisdiction": "RF"}
    )

    print(f"   üìù –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {doc_id[:8]}...")

    # 2. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    complex_query = "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–æ —Ä–∞–±–æ—Ç–Ω–∏–∫—É –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ –∑–∞—Ä–ø–ª–∞—Ç—ã?"

    response = await rag.search(complex_query, max_results=5, search_type="hybrid")

    print(f"\n   üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {complex_query}")
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
    print(f"      –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.latency:.2f}—Å")
    print(f"      –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(response.sources)}")

    print(f"\n   üí¨ –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:")
    print(f"      {response.answer}")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print(f"\n   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")

    # LLM Router —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    llm_stats = await llm_router.get_providers_stats()
    active_llm_providers = sum(1 for stats in llm_stats.values() if stats.total_requests > 0)
    print(f"   ü§ñ LLM Router: {active_llm_providers} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")

    # Embedder —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cache_stats = embedder.get_cache_stats()
    print(f"   üß† Embedder: –∫–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç {cache_stats['size']} –∑–∞–ø–∏—Å–µ–π")

    # RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    rag_stats = await rag.get_stats()
    print(f"   üìö RAG: {rag_stats['vector_store']['documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, "
          f"{rag_stats['vector_store']['total_chunks']} —á–∞—Å—Ç–µ–π")

    return {"llm_router": llm_router, "embedder": embedder, "rag": rag}


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ MEGA AGENT PRO - Basic LLM Router + Embedder + RAG Demo")
    print("=" * 70)

    try:
        # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LLM Router
        llm_router = await llm_router_demo()

        # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Simple Embedder
        embedder = await simple_embedder_demo()

        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Basic RAG
        rag = await basic_rag_demo(embedder, llm_router)

        # 4. –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        components = await integration_demo()

        print("\n‚úÖ === Demo Complete ===")

        print("\nüéØ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚úÖ LLM Router —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π")
        print("      - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OpenAI, Gemini, Claude, Local –º–æ–¥–µ–ª–µ–π")
        print("      - Load balancing –∏ failover")
        print("      - Rate limiting –∏ cost optimization")
        print("      - Health monitoring –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        print("\n   ‚úÖ Simple Embedder —Å multi-provider –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
        print("      - OpenAI, Gemini, Local Sentence Transformers")
        print("      - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("      - Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã")
        print("      - –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

        print("\n   ‚úÖ Basic RAG —Å –ø–æ–ª–Ω—ã–º pipeline")
        print("      - –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å chunking")
        print("      - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏ keyword –ø–æ–∏—Å–∫")
        print("      - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫")
        print("      - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")

        print("\nüöÄ RAG Foundation –≥–æ—Ç–æ–≤–∞ –¥–ª—è:")
        print("   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("   üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–Ω–∞–Ω–∏—è–º")
        print("   üí¨ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–Ω–æ-–æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
        print("   üìö –°–æ–∑–¥–∞–Ω–∏—è knowledge bases")
        print("   üèõÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")

        print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏")
        print("   2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        print("   3. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π chunking")
        print("   4. –£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("   5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ RAG")

    except Exception as e:
        print(f"‚ùå Demo error: {e}")
        logger.exception("Demo failed")


if __name__ == "__main__":
    asyncio.run(main())