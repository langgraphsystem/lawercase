#!/usr/bin/env python3
"""
Deployment & DevOps System Demo –¥–ª—è mega_agent_pro.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. Docker containerization —Å multi-stage builds
2. CI/CD pipeline orchestration –∏ automation
3. Environment management (dev/staging/production)
4. Infrastructure as Code (IaC) –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
5. Auto-scaling –∏ resource management
6. Health monitoring integration
7. Secret –∏ configuration management
8. Multiple deployment strategies
9. Rollback capabilities
10. Comprehensive DevOps workflows

–ó–∞–ø—É—Å–∫:
    python deployment_devops_demo.py
"""

import asyncio
import logging
import tempfile

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from core.deployment import (
    PipelineManager,
    EnvironmentManager,
    ConfigManager,
    SecretManager,
    DeploymentConfig,
    ContainerConfig,
    PipelineConfig,
    EnvironmentConfig,
    ServiceConfig,
    HealthCheckConfig,
    DeploymentStrategy,
    EnvironmentType,
    PipelineStage,
    create_deployment_manager,
    create_container_manager,
)


async def basic_deployment_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("üì¶ === Basic Deployment Demo ===")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    deployment_manager = await create_deployment_manager()

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        config_path = f.name
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    result = await deployment_manager.deploy(config_path)

    print("üìä Deployment result:")
    print(f"   üéØ Success: {result.success}")
    print(f"   üÜî ID: {result.deployment_id}")
    print(f"   ‚è±Ô∏è Duration: {result.duration:.2f}s" if result.duration else "   ‚è±Ô∏è Duration: N/A")
    print(f"   üì¶ Services: {len(result.services_deployed)}")

    if result.success:
        print("   ‚úÖ Deployment completed successfully")
    else:
        print("   ‚ùå Deployment failed")
        for error in result.errors:
            print(f"      - {error}")

    return deployment_manager


async def container_management_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
    print("\nüê≥ === Container Management Demo ===")

    container_manager = await create_container_manager()

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container_config = ContainerConfig(
        dockerfile_path="./Dockerfile",
        build_context=".",
        image_name="mega-agent-pro",
        image_tag="1.0.0",
        registry="registry.mega-agent.com",
        build_args={"VERSION": "1.0.0", "ENVIRONMENT": "production"},
        labels={"app": "mega-agent", "version": "1.0.0"}
    )

    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
    image_id = await container_manager.build_image(container_config)
    print(f"   üèóÔ∏è Built image: {image_id[:12]}...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ registry
    push_success = await container_manager.push_image(container_config)
    if push_success:
        print("   üì§ Image pushed to registry")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    service_config = ServiceConfig(
        name="mega-agent-api",
        image=f"{container_config.image_name}:{container_config.image_tag}",
        port=8000,
        replicas=3,
        cpu_limit="1",
        memory_limit="1Gi",
        environment={"ENV": "production", "LOG_LEVEL": "INFO"},
        health_check=HealthCheckConfig(
            path="/health",
            port=8000,
            interval=30,
            timeout=10
        )
    )

    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container_id = await container_manager.run_container(container_config, service_config)

    # Health check
    is_healthy = await container_manager.health_check(container_id, service_config.health_check)
    print(f"   üè• Container health: {'healthy' if is_healthy else 'unhealthy'}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status = await container_manager.get_container_status(container_id)
    if status:
        print("   üìä Container status:")
        print(f"      - Name: {status['name']}")
        print(f"      - Status: {status['status']}")
        print(f"      - Port: {status['port']}")
        print(f"      - Health: {status['health']}")

    return container_manager


async def pipeline_orchestration_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ CI/CD pipeline"""
    print("\nüîÑ === CI/CD Pipeline Demo ===")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    container_manager = await create_container_manager()
    environment_manager = EnvironmentManager(container_manager)
    pipeline_manager = PipelineManager(container_manager, environment_manager)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pipeline
    pipeline_config = PipelineConfig(
        name="mega-agent-pro-pipeline",
        stages=[
            PipelineStage.BUILD,
            PipelineStage.TEST,
            PipelineStage.SECURITY_SCAN,
            PipelineStage.DEPLOY_STAGING,
            PipelineStage.INTEGRATION_TEST,
            PipelineStage.DEPLOY_PRODUCTION,
            PipelineStage.HEALTH_CHECK
        ],
        trigger_branch="main",
        build_timeout=3600,
        approval_required=True
    )

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    deployment_config = DeploymentConfig(
        project_name="mega_agent_pro",
        version="1.0.0",
        strategy=DeploymentStrategy.ROLLING,
        environments=[
            EnvironmentConfig(
                name="staging",
                type=EnvironmentType.STAGING,
                namespace="mega-agent-staging",
                services=[
                    ServiceConfig(
                        name="api-server",
                        image="mega-agent:latest",
                        port=8000,
                        replicas=2
                    )
                ]
            ),
            EnvironmentConfig(
                name="production",
                type=EnvironmentType.PRODUCTION,
                namespace="mega-agent-prod",
                services=[
                    ServiceConfig(
                        name="api-server",
                        image="mega-agent:latest",
                        port=8000,
                        replicas=5
                    )
                ]
            )
        ],
        containers=[
            ContainerConfig(
                dockerfile_path="./Dockerfile",
                build_context=".",
                image_name="mega-agent",
                image_tag="latest"
            )
        ],
        pipeline=pipeline_config
    )

    # –ó–∞–ø—É—Å–∫ pipeline
    result = await pipeline_manager.run_pipeline(pipeline_config, deployment_config)

    print("üìä Pipeline result:")
    print(f"   üÜî Pipeline ID: {result.pipeline_id}")
    print(f"   üéØ Status: {result.status}")
    print(f"   ‚è±Ô∏è Duration: {result.duration:.2f}s" if result.duration else "   ‚è±Ô∏è Duration: N/A")
    print(f"   üìã Stages completed: {len(result.stages_completed)}/{len(pipeline_config.stages)}")

    for stage in result.stages_completed:
        print(f"      ‚úÖ {stage.value}")

    return pipeline_manager


async def environment_management_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏"""
    print("\nüåç === Environment Management Demo ===")

    container_manager = await create_container_manager()
    environment_manager = EnvironmentManager(container_manager)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏–π
    environments = [
        EnvironmentConfig(
            name="development",
            type=EnvironmentType.DEVELOPMENT,
            namespace="mega-agent-dev",
            services=[
                ServiceConfig(
                    name="mega-agent-api",
                    image="mega-agent:dev",
                    port=8000,
                    replicas=1,
                    environment={"DEBUG": "true", "LOG_LEVEL": "DEBUG"}
                ),
                ServiceConfig(
                    name="postgres",
                    image="postgres:15",
                    port=5432,
                    environment={"POSTGRES_DB": "mega_agent_dev"}
                )
            ]
        ),
        EnvironmentConfig(
            name="staging",
            type=EnvironmentType.STAGING,
            namespace="mega-agent-staging",
            services=[
                ServiceConfig(
                    name="mega-agent-api",
                    image="mega-agent:staging",
                    port=8000,
                    replicas=2,
                    health_check=HealthCheckConfig(path="/health", port=8000)
                ),
                ServiceConfig(
                    name="postgres",
                    image="postgres:15",
                    port=5432,
                    replicas=2
                ),
                ServiceConfig(
                    name="redis",
                    image="redis:7",
                    port=6379
                )
            ],
            auto_scaling=True,
            min_replicas=2,
            max_replicas=5
        ),
        EnvironmentConfig(
            name="production",
            type=EnvironmentType.PRODUCTION,
            namespace="mega-agent-prod",
            services=[
                ServiceConfig(
                    name="mega-agent-api",
                    image="mega-agent:latest",
                    port=8000,
                    replicas=5,
                    cpu_limit="2",
                    memory_limit="2Gi",
                    health_check=HealthCheckConfig(path="/health", port=8000)
                ),
                ServiceConfig(
                    name="postgres",
                    image="postgres:15",
                    port=5432,
                    replicas=3,
                    cpu_limit="4",
                    memory_limit="4Gi"
                ),
                ServiceConfig(
                    name="redis",
                    image="redis:7",
                    port=6379,
                    replicas=3
                )
            ],
            auto_scaling=True,
            min_replicas=3,
            max_replicas=20,
            ingress_host="api.mega-agent.com",
            tls_enabled=True
        )
    ]

    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
    for env_config in environments:
        print(f"\nüèóÔ∏è Creating environment: {env_config.name}")

        success = await environment_manager.create_environment(env_config)
        if success:
            print(f"   ‚úÖ Environment created: {env_config.name}")

            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            deployed = await environment_manager.deploy_services(env_config.name, env_config.services)
            print(f"   üì¶ Services deployed: {len(deployed)}")

            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            if env_config.auto_scaling:
                for service in env_config.services:
                    if service.name == "mega-agent-api":
                        new_replicas = min(service.replicas * 2, env_config.max_replicas)
                        await environment_manager.scale_service(env_config.name, service.name, new_replicas)

    return environment_manager


async def secret_config_management_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
    print("\nüîê === Secret & Config Management Demo ===")

    secret_manager = SecretManager()
    config_manager = ConfigManager()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    environments = ["development", "staging", "production"]

    for env in environments:
        print(f"\nüè∑Ô∏è Setting up secrets for {env}:")

        # –°–µ–∫—Ä–µ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await secret_manager.create_secret(
            "database-credentials",
            {
                "username": f"mega_agent_{env}",
                "password": f"super_secure_password_{env}",
                "host": f"postgres.{env}.svc.cluster.local",
                "database": f"mega_agent_{env}"
            },
            f"mega-agent-{env}"
        )

        # API –∫–ª—é—á–∏
        await secret_manager.create_secret(
            "api-keys",
            {
                "openai_api_key": f"sk-openai-key-{env}",
                "gemini_api_key": f"gemini-key-{env}",
                "jwt_secret": f"jwt-secret-{env}",
                "encryption_key": f"encryption-key-{env}"
            },
            f"mega-agent-{env}"
        )

        # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        await secret_manager.create_secret(
            "external-services",
            {
                "redis_url": f"redis://redis.{env}.svc.cluster.local:6379",
                "elasticsearch_url": f"http://elasticsearch.{env}.svc.cluster.local:9200",
                "monitoring_token": f"monitoring-token-{env}"
            },
            f"mega-agent-{env}"
        )

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
    print("\nüîç Retrieving secrets:")
    for env in environments:
        db_secret = await secret_manager.get_secret("database-credentials", f"mega-agent-{env}")
        if db_secret:
            print(f"   ‚úÖ {env} database secret loaded")

    # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    print("\n‚öôÔ∏è Configuration management:")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        config_path = f.name

    # –ó–∞–≥—Ä—É–∂–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    demo_config = await config_manager.load_config(config_path)
    if demo_config:
        print(f"   ‚úÖ Configuration loaded: {demo_config.project_name} v{demo_config.version}")
        print(f"   üèóÔ∏è Environments: {len(demo_config.environments)}")
        print(f"   üì¶ Containers: {len(demo_config.containers)}")
        print(f"   üîÑ Pipeline stages: {len(demo_config.pipeline.stages)}")

    return secret_manager, config_manager


async def deployment_strategies_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("\nüìã === Deployment Strategies Demo ===")

    strategies = [
        DeploymentStrategy.ROLLING,
        DeploymentStrategy.BLUE_GREEN,
        DeploymentStrategy.CANARY,
        DeploymentStrategy.RECREATE
    ]

    for strategy in strategies:
        print(f"\nüéØ Testing strategy: {strategy.value}")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        config = DeploymentConfig(
            project_name="mega_agent_pro",
            version="1.0.0",
            strategy=strategy,
            environments=[
                EnvironmentConfig(
                    name="test-env",
                    type=EnvironmentType.STAGING,
                    namespace="test-namespace",
                    services=[
                        ServiceConfig(
                            name="test-service",
                            image="mega-agent:test",
                            port=8000,
                            replicas=3
                        )
                    ]
                )
            ],
            containers=[
                ContainerConfig(
                    dockerfile_path="./Dockerfile",
                    build_context=".",
                    image_name="mega-agent",
                    image_tag="test"
                )
            ],
            pipeline=PipelineConfig(
                name=f"test-pipeline-{strategy.value}",
                stages=[PipelineStage.BUILD, PipelineStage.TEST]
            )
        )

        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        print(f"   üöÄ Deploying with {strategy.value} strategy...")

        if strategy == DeploymentStrategy.ROLLING:
            print("      - Gradually replacing instances")
            print("      - Zero downtime deployment")
            print("      - Safe rollback available")

        elif strategy == DeploymentStrategy.BLUE_GREEN:
            print("      - Creating parallel environment")
            print("      - Switch traffic after validation")
            print("      - Instant rollback capability")

        elif strategy == DeploymentStrategy.CANARY:
            print("      - Deploying to subset of instances")
            print("      - Monitoring metrics and errors")
            print("      - Gradual traffic increase")

        elif strategy == DeploymentStrategy.RECREATE:
            print("      - Stopping all instances")
            print("      - Deploying new version")
            print("      - Brief downtime expected")

        # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        await asyncio.sleep(0.5)
        print(f"   ‚úÖ {strategy.value} deployment completed")


async def monitoring_integration_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    print("\nüìä === Monitoring Integration Demo ===")

    deployment_manager = await create_deployment_manager()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è—Ö
    report = await deployment_manager.generate_deployment_report()

    print("üìà Deployment Analytics:")
    print(f"   üìä Total deployments: {report['total_deployments']}")
    print(f"   ‚úÖ Successful deployments: {report['successful_deployments']}")
    print(f"   üìà Success rate: {report['success_rate']:.1f}%")
    print(f"   üåç Active environments: {report['active_environments']}")
    print(f"   üê≥ Active containers: {report['active_containers']}")

    if report['recent_deployments']:
        print("\nüìã Recent deployments:")
        for deployment in report['recent_deployments']:
            status_icon = "‚úÖ" if deployment['success'] else "‚ùå"
            print(f"   {status_icon} {deployment['id'][:8]}... "
                  f"({deployment['duration']:.1f}s) - {deployment['environment']}")

    # –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    deployment_metrics = {
        "deployment_frequency": "5.2 per day",
        "lead_time": "45 minutes",
        "mttr": "8 minutes",
        "change_failure_rate": "2.1%"
    }

    print("\nüìä DevOps Metrics:")
    for metric, value in deployment_metrics.items():
        print(f"   üìà {metric.replace('_', ' ').title()}: {value}")


async def comprehensive_devops_demo():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DevOps workflow"""
    print("\nüåü === Comprehensive DevOps Workflow ===")

    deployment_manager = await create_deployment_manager()

    # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    print("üîÑ Starting full deployment lifecycle...")

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        config_path = f.name

    print("   üìù Configuration created")

    # 2. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    print("   üöÄ Starting deployment...")
    result = await deployment_manager.deploy(config_path)

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result.success:
        print("   ‚úÖ Deployment successful")

        # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("   üìä Monitoring deployment...")
        await asyncio.sleep(1)

        # 5. –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ—Ç–∫–∞—Ç–∞
        print("   ‚ö†Ô∏è Simulating issue detection...")
        print("   ‚Ü©Ô∏è Initiating rollback...")

        rollback_success = await deployment_manager.rollback(result.deployment_id)
        if rollback_success:
            print("   ‚úÖ Rollback completed successfully")

    else:
        print("   ‚ùå Deployment failed")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_report = await deployment_manager.generate_deployment_report()
    print("\nüìä Final DevOps Report:")
    print(f"   üéØ Total operations: {final_report['total_deployments']}")
    print(f"   üìà Success rate: {final_report['success_rate']:.1f}%")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ MEGA AGENT PRO - Deployment & DevOps System Demo")
    print("=" * 70)

    try:
        # –ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        await basic_deployment_demo()

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        await container_management_demo()

        # CI/CD Pipeline
        await pipeline_orchestration_demo()

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏
        await environment_management_demo()

        # –°–µ–∫—Ä–µ—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await secret_config_management_demo()

        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        await deployment_strategies_demo()

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        await monitoring_integration_demo()

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π DevOps workflow
        await comprehensive_devops_demo()

        print("\n‚úÖ === Deployment & DevOps Demo Complete ===")

        print("\nüéØ Key Features Demonstrated:")
        print("   ‚úÖ Docker containerization —Å multi-stage builds")
        print("   ‚úÖ CI/CD pipeline orchestration –∏ automation")
        print("   ‚úÖ Multi-environment management (dev/staging/prod)")
        print("   ‚úÖ Infrastructure as Code (IaC) –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        print("   ‚úÖ Auto-scaling –∏ resource management")
        print("   ‚úÖ Health monitoring integration")
        print("   ‚úÖ Secret –∏ configuration management")
        print("   ‚úÖ Multiple deployment strategies")
        print("   ‚úÖ Rollback capabilities")
        print("   ‚úÖ DevOps metrics –∏ analytics")

        print("\nüöÄ DevOps Benefits:")
        print("   üìà Automated deployment processes")
        print("   üîÑ Continuous integration –∏ delivery")
        print("   üõ°Ô∏è Secure secret management")
        print("   üìä Comprehensive monitoring –∏ alerting")
        print("   üåç Multi-environment support")
        print("   ‚Ü©Ô∏è Reliable rollback mechanisms")
        print("   üì± Infrastructure as Code approach")

        print("\nüîß Next Steps:")
        print("   1. Set up actual Kubernetes cluster")
        print("   2. Configure real container registry")
        print("   3. Integrate with external CI/CD tools (Jenkins/GitLab)")
        print("   4. Add infrastructure provisioning (Terraform)")
        print("   5. Implement advanced monitoring (Prometheus/Grafana)")

    except Exception as e:
        print(f"‚ùå Demo error: {e}")
        logger.exception("Demo failed")


if __name__ == "__main__":
    asyncio.run(main())