#!/usr/bin/env python3
"""
Real Embeddings Integration Demo –¥–ª—è mega_agent_pro.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö embeddings providers
2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å MemoryManager
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ RAGPipelineAgent

–ó–∞–ø—É—Å–∫:
    python real_embeddings_demo.py
"""

import asyncio
import logging
import os
import time
from typing import List

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from core.embeddings import (
        EmbeddingManager,
        EmbeddingRequest,
        create_gemini_config,
        create_local_config,
        create_openai_config,
    )
    from core.memory.memory_manager import MemoryManager
    from core.config import get_default_embedding_config, get_development_embedding_config
    EMBEDDINGS_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Embeddings modules not available: {e}")
    EMBEDDINGS_AVAILABLE = False

from core.groupagents.rag_pipeline_agent import RAGPipelineAgent, SearchQuery
from core.memory.models import MemoryRecord


async def demo_embedding_providers():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö embedding providers."""
    print("üîç === DEMO: Real Embeddings Integration ===\n")

    if not EMBEDDINGS_AVAILABLE:
        print("‚ùå Real embeddings not available, skipping demo")
        return

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        "This is a legal document about contract law",
        "Artificial intelligence in legal research",
        "Database management for law firms",
        "Client confidentiality and data protection",
        "Regulatory compliance in financial services"
    ]

    print(f"üìù Test texts ({len(test_texts)} items):")
    for i, text in enumerate(test_texts, 1):
        print(f"   {i}. {text}")
    print()

    # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Local Provider
    await demo_local_embeddings(test_texts)

    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Cloud Providers (–µ—Å–ª–∏ API keys –¥–æ—Å—Ç—É–ø–Ω—ã)
    await demo_cloud_embeddings(test_texts)

    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MemoryManager
    await demo_memory_integration(test_texts)

    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    await demo_caching_performance(test_texts)


async def demo_local_embeddings(test_texts: List[str]):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è local embeddings."""
    print("üè† === Local Embeddings Demo ===")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        config = create_local_config()
        embedding_manager = EmbeddingManager([config])

        print(f"‚úÖ Initialized local embedding provider: {config.model.value}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings
        start_time = time.time()
        request = EmbeddingRequest(texts=test_texts)
        response = await embedding_manager.embed(request)
        elapsed = time.time() - start_time

        print(f"‚ö° Generated {len(response.embeddings)} embeddings in {elapsed:.2f}s")
        print(f"üìä Embedding dimensions: {len(response.embeddings[0]) if response.embeddings else 0}")
        print(f"üîß Provider: {response.provider}, Model: {response.model}")
        print(f"üìà Processing time: {response.processing_time:.3f}s")
        print(f"üéØ Token count: {response.token_count}")
        print()

    except Exception as e:
        print(f"‚ùå Local embeddings failed: {e}")
        print()


async def demo_cloud_embeddings(test_texts: List[str]):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è cloud embeddings (–µ—Å–ª–∏ API keys –¥–æ—Å—Ç—É–ø–Ω—ã)."""
    print("‚òÅÔ∏è === Cloud Embeddings Demo ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini
    gemini_key = os.getenv("GEMINI_API_KEY")
    if gemini_key:
        await demo_gemini_embeddings(test_texts, gemini_key)
    else:
        print("üîë GEMINI_API_KEY not found, skipping Gemini demo")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI
    openai_key = os.getenv("OPENAI_API_KEY")
    if openai_key:
        await demo_openai_embeddings(test_texts, openai_key)
    else:
        print("üîë OPENAI_API_KEY not found, skipping OpenAI demo")

    print()


async def demo_gemini_embeddings(test_texts: List[str], api_key: str):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Gemini embeddings."""
    try:
        config = create_gemini_config(api_key=api_key)
        embedding_manager = EmbeddingManager([config])

        print(f"‚úÖ Initialized Gemini provider: {config.model.value}")

        start_time = time.time()
        request = EmbeddingRequest(texts=test_texts[:2])  # –ú–µ–Ω—å—à–µ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API calls
        response = await embedding_manager.embed(request)
        elapsed = time.time() - start_time

        print(f"‚ö° Gemini: {len(response.embeddings)} embeddings in {elapsed:.2f}s")
        print(f"üìä Dimensions: {len(response.embeddings[0]) if response.embeddings else 0}")

    except Exception as e:
        print(f"‚ùå Gemini embeddings failed: {e}")


async def demo_openai_embeddings(test_texts: List[str], api_key: str):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è OpenAI embeddings."""
    try:
        config = create_openai_config(api_key=api_key)
        embedding_manager = EmbeddingManager([config])

        print(f"‚úÖ Initialized OpenAI provider: {config.model.value}")

        start_time = time.time()
        request = EmbeddingRequest(texts=test_texts[:2])  # –ú–µ–Ω—å—à–µ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API calls
        response = await embedding_manager.embed(request)
        elapsed = time.time() - start_time

        print(f"‚ö° OpenAI: {len(response.embeddings)} embeddings in {elapsed:.2f}s")
        print(f"üìä Dimensions: {len(response.embeddings[0]) if response.embeddings else 0}")

    except Exception as e:
        print(f"‚ùå OpenAI embeddings failed: {e}")


async def demo_memory_integration(test_texts: List[str]):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MemoryManager."""
    print("üß† === MemoryManager Integration Demo ===")

    try:
        # –°–æ–∑–¥–∞–µ–º MemoryManager —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ embeddings
        embedding_configs = get_development_embedding_config()
        memory_manager = MemoryManager.create_with_real_embeddings(embedding_configs)

        print(f"‚úÖ Created MemoryManager with {len(embedding_configs)} embedding providers")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤ –ø–∞–º—è—Ç—å
        records = []
        for i, text in enumerate(test_texts):
            record = MemoryRecord(
                text=text,
                type="semantic",
                user_id="demo_user",
                metadata={"source": "demo", "index": i}
            )
            records.append(record)

        await memory_manager.awrite(records)
        print(f"üìù Stored {len(records)} records with embeddings")

        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø–∏—Å–µ–π
        query = "legal document contract"
        results = await memory_manager.aretrieve(query, user_id="demo_user", topk=3)

        print(f"üîç Search results for '{query}':")
        for i, result in enumerate(results, 1):
            print(f"   {i}. {result.text[:50]}... (score: {getattr(result, 'score', 'N/A')})")

        print()

    except Exception as e:
        print(f"‚ùå Memory integration failed: {e}")
        print()


async def demo_caching_performance(test_texts: List[str]):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ === Caching Performance Demo ===")

    if not EMBEDDINGS_AVAILABLE:
        print("‚ùå Embeddings not available for caching demo")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ embeddings –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        config = create_local_config(cache_ttl_hours=1)
        embedding_manager = EmbeddingManager([config])

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
        print("üìä First request (no cache):")
        start_time = time.time()
        request = EmbeddingRequest(texts=test_texts, cache_key="demo_cache_key")
        response1 = await embedding_manager.embed(request)
        time1 = time.time() - start_time

        print(f"   ‚è±Ô∏è Time: {time1:.3f}s, Cached: {response1.cached}")

        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–æ–º)
        print("üìä Second request (with cache):")
        start_time = time.time()
        request = EmbeddingRequest(texts=test_texts, cache_key="demo_cache_key")
        response2 = await embedding_manager.embed(request)
        time2 = time.time() - start_time

        print(f"   ‚è±Ô∏è Time: {time2:.3f}s, Cached: {response2.cached}")

        speedup = time1 / time2 if time2 > 0 else float('inf')
        print(f"üöÄ Speedup: {speedup:.1f}x faster with cache")
        print()

    except Exception as e:
        print(f"‚ùå Caching demo failed: {e}")
        print()


async def demo_rag_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAGPipelineAgent."""
    print("üîé === RAG Pipeline Integration Demo ===")

    try:
        # –°–æ–∑–¥–∞–µ–º MemoryManager —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ embeddings
        if EMBEDDINGS_AVAILABLE:
            embedding_configs = get_development_embedding_config()
            memory_manager = MemoryManager.create_with_real_embeddings(embedding_configs)
            print(f"‚úÖ Using real embeddings with {len(embedding_configs)} providers")
        else:
            memory_manager = MemoryManager()
            print("‚ö†Ô∏è Using mock embeddings (real embeddings not available)")

        # –°–æ–∑–¥–∞–µ–º RAG –∞–≥–µ–Ω—Ç–∞
        rag_agent = RAGPipelineAgent(memory_manager=memory_manager)

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        search_query = SearchQuery(
            query_text="legal document management systems",
            limit=3
        )

        print(f"üîç Searching for: '{search_query.query_text}'")
        search_response = await rag_agent.asearch(search_query, user_id="demo_user")

        print("üìä Search Results:")
        print(f"   Found: {len(search_response.results)} results")
        print(f"   Strategy: {search_response.strategy}")
        print(f"   Processing time: {search_response.processing_time:.3f}s")

        for i, result in enumerate(search_response.results, 1):
            print(f"   {i}. Score: {result.score:.3f}, Text: {result.text[:50]}...")

        print()

    except Exception as e:
        print(f"‚ùå RAG integration failed: {e}")
        print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("ü§ñ MEGA AGENT PRO - Real Embeddings Integration Demo")
    print("=" * 60)
    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º embedding providers
    await demo_embedding_providers()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å RAG
    await demo_rag_integration()

    print("‚úÖ === Demo Complete ===")
    print()
    print("üí° Next Steps:")
    print("   1. Set GEMINI_API_KEY environment variable for Gemini embeddings")
    print("   2. Set OPENAI_API_KEY environment variable for OpenAI embeddings")
    print("   3. Install sentence-transformers for local embeddings:")
    print("      pip install sentence-transformers")
    print("   4. Use real embeddings in production by calling:")
    print("      MemoryManager.create_with_real_embeddings(embedding_configs)")


if __name__ == "__main__":
    asyncio.run(main())