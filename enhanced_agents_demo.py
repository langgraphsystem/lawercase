#!/usr/bin/env python3
"""
Enhanced Agents Integration Demo –¥–ª—è mega_agent_pro.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤–æ–π LLM/RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
1. EnhancedCaseAgent - AI-powered —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–º–∏
2. EnhancedWriterAgent - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
3. EnhancedValidatorAgent - AI –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
4. –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
5. End-to-end workflow –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è

–ó–∞–ø—É—Å–∫:
    python enhanced_agents_demo.py
"""

import asyncio
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from core.llm_router import create_llm_router
from core.simple_embedder import create_simple_embedder
from core.basic_rag import create_basic_rag

# –ò–º–ø–æ—Ä—Ç—ã —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
from core.groupagents.enhanced_case_agent import (
    create_enhanced_case_agent,
    CaseAnalysisRequest,
    CaseSearchRequest
)

from core.groupagents.enhanced_writer_agent import (
    create_enhanced_writer_agent,
    DocumentGenerationRequest,
    DocumentType,
    Language
)

from core.groupagents.enhanced_validator_agent import (
    create_enhanced_validator_agent,
    ValidationRequest,
    ValidationType
)

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from core.groupagents.models import CaseType, CaseStatus


async def setup_shared_infrastructure():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–π AI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–π AI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")

    # –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    ai_config = {
        "providers": {
            "openai": {"enabled": True, "api_key": "demo-key"},
            "gemini": {"enabled": True, "api_key": "demo-key"},
            "claude": {"enabled": True, "api_key": "demo-key"},
            "mock": {"enabled": True, "failure_rate": 0.05}
        }
    }

    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    llm_router = await create_llm_router(ai_config)
    embedder = await create_simple_embedder(ai_config)
    rag_system = await create_basic_rag(embedder, llm_router)

    print("   ‚úÖ LLM Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print("   ‚úÖ Simple Embedder –≥–æ—Ç–æ–≤")
    print("   ‚úÖ Basic RAG —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")

    return llm_router, embedder, rag_system


async def setup_agents(llm_router, embedder, rag_system):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–±—â–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    case_agent = await create_enhanced_case_agent(llm_router, embedder, rag_system)
    writer_agent = await create_enhanced_writer_agent(llm_router, embedder, rag_system)
    validator_agent = await create_enhanced_validator_agent(llm_router, embedder, rag_system)

    print("   ‚úÖ EnhancedCaseAgent –≥–æ—Ç–æ–≤")
    print("   ‚úÖ EnhancedWriterAgent –≥–æ—Ç–æ–≤")
    print("   ‚úÖ EnhancedValidatorAgent –≥–æ—Ç–æ–≤")

    return case_agent, writer_agent, validator_agent


async def demo_case_agent(case_agent):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è EnhancedCaseAgent"""
    print("\nüìÅ === Enhanced Case Agent Demo ===")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ–ª–æ
    case_data = {
        "title": "–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä - –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
        "description": """
        –ö–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ –ø–æ–≤–æ–¥—É –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã.
        –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —É–≤–æ–ª–∏–ª –µ–≥–æ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –Ω–µ –≤—ã–ø–ª–∞—Ç–∏–ª –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é.
        –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å–∫ –≤ —Å—É–¥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
        """,
        "case_type": CaseType.CIVIL,
        "priority": "high",
        "client_id": "client_001",
        "assigned_lawyer": "lawyer_petrova",
        "tags": ["—Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", "—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è"]
    }

    # –°–æ–∑–¥–∞–µ–º –¥–µ–ª–æ
    result = await case_agent.create_case(case_data)
    print(f"   üìù –î–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ: {result.case_id[:8]}... (success: {result.success})")

    if result.success:
        case_id = result.case_id

        # AI –∞–Ω–∞–ª–∏–∑ –¥–µ–ª–∞
        analysis_request = CaseAnalysisRequest(
            case_id=case_id,
            analysis_type="strategy",
            priority="high"
        )

        analysis = await case_agent.analyze_case(analysis_request)
        if analysis:
            print(f"   üß† AI –∞–Ω–∞–ª–∏–∑ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}):")
            print(f"      {analysis.analysis[:100]}...")
            print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis.recommendations)}")

        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–µ–ª
        search_request = CaseSearchRequest(
            query="—Ç—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
            search_type="semantic",
            max_results=3
        )

        search_results = await case_agent.search_cases(search_request)
        print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –¥–µ–ª: {len(search_results)}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = await case_agent.get_case_recommendations(case_id)
        print(f"   üí° AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(recommendations)}")
        for i, rec in enumerate(recommendations[:2], 1):
            print(f"      {i}. {rec.description[:60]}...")

        return case_id

    return None


async def demo_writer_agent(writer_agent, case_id=None):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è EnhancedWriterAgent"""
    print("\nüìù === Enhanced Writer Agent Demo ===")

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Å–∫–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è
    generation_request = DocumentGenerationRequest(
        document_type=DocumentType.MOTION,
        title="–ò—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
        content_data={
            "plaintiff": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            "defendant": "–û–û–û '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ë—É–¥—É—â–µ–≥–æ'",
            "claim": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –≤–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã",
            "grounds": "–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
            "compensation": "150000 —Ä—É–±–ª–µ–π",
            "case_id": case_id
        },
        style="formal",
        language=Language.RUSSIAN,
        use_rag=True,
        max_length=1500
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    doc_result = await writer_agent.generate_document(generation_request)
    print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (ID: {doc_result.document_id[:8]}...)")
    print(f"      –ö–∞—á–µ—Å—Ç–≤–æ: {doc_result.quality_score:.2f}")
    print(f"      –°–ª–æ–≤: {doc_result.word_count}")
    print(f"      –í—Ä–µ–º—è: {doc_result.generation_time:.2f}—Å")

    if doc_result.sources:
        print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(doc_result.sources[:2])}")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if doc_result.success and doc_result.quality_score < 0.9:
        print("\n   üîß –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        improved_result = await writer_agent.improve_document(
            doc_result.document_id,
            "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–π –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
        )

        if improved_result.success:
            print(f"      ‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (ID: {improved_result.document_id[:8]}...)")
            print(f"      –ù–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {improved_result.quality_score:.2f}")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
    print("\n   üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É...")
    template_result = await writer_agent.generate_from_template(
        "letter_formal",
        {
            "recipient": "–¢—Ä—É–¥–æ–≤–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è",
            "sender": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ñ–∏—Ä–º–∞ '–ü—Ä–∞–≤–æ–ó–∞—â–∏—Ç–∞'",
            "subject": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Ç—Ä—É–¥–æ–≤—ã—Ö –ø—Ä–∞–≤",
            "main_content": "–°–æ–æ–±—â–∞–µ–º –æ —Ñ–∞–∫—Ç–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
        }
    )

    if template_result.success:
        print(f"      üì® –ü–∏—Å—å–º–æ —Å–æ–∑–¥–∞–Ω–æ (–∫–∞—á–µ—Å—Ç–≤–æ: {template_result.quality_score:.2f})")

    return doc_result.document_id if doc_result.success else None


async def demo_validator_agent(validator_agent, document_id=None):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è EnhancedValidatorAgent"""
    print("\n‚úÖ === Enhanced Validator Agent Demo ===")

    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_document = """
    –ò—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ

    –í –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥ –≥. –ú–æ—Å–∫–≤—ã

    –û—Ç: –ò–≤–∞–Ω–æ–≤ –ò.–ò.
    –ö: –û–û–û "–ö–æ–º–ø–∞–Ω–∏—è"

    –ü—Ä–æ—à—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—è –Ω–∞ —Ä–∞–±–æ—Ç–µ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º.
    –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —É–≤–æ–ª–∏–ª –º–µ–Ω—è 15 –º–∞—Ä—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.

    –ü–æ–¥–ø–∏—Å—å: –ò.–ò. –ò–≤–∞–Ω–æ–≤
    """

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print("   üìã –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    structure_validation = await validator_agent.validate_document_structure(test_document)

    print(f"      –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {structure_validation.overall_score:.2f}")
    print(f"      –ü—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {'‚úÖ' if structure_validation.passed else '‚ùå'}")
    print(f"      –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(structure_validation.issues)}")

    for issue in structure_validation.issues[:3]:
        print(f"        - {issue.severity}: {issue.description[:50]}...")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    print("\n   ‚öñÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...")
    legal_request = ValidationRequest(
        content=test_document,
        validation_type=ValidationType.LEGAL_COMPLIANCE,
        context={"jurisdiction": "RU"},
        auto_correct=True
    )

    legal_validation = await validator_agent.validate(legal_request)

    print(f"      –ü—Ä–∞–≤–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {legal_validation.overall_score:.2f}")
    print(f"      –í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {legal_validation.validation_time:.2f}—Å")

    if legal_validation.corrected_content:
        print("      üîß –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–∏–µ–º
    print("\n   ‚ú® –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º...")
    final_validation, improved_content = await validator_agent.validate_and_improve(
        test_document,
        ValidationType.CONTENT_QUALITY
    )

    print(f"      –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {final_validation.overall_score:.2f}")
    print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(final_validation.recommendations)}")

    for rec in final_validation.recommendations[:2]:
        print(f"        üí° {rec}")

    return final_validation


async def demo_integrated_workflow(case_agent, writer_agent, validator_agent):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ workflow"""
    print("\nüîÑ === Integrated Workflow Demo ===")
    print("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –î–µ–ª–æ ‚Üí –î–æ–∫—É–º–µ–Ω—Ç ‚Üí –í–∞–ª–∏–¥–∞—Ü–∏—è ‚Üí –£–ª—É—á—à–µ–Ω–∏–µ")

    # 1. –°–æ–∑–¥–∞–µ–º –¥–µ–ª–æ
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞...")
    case_data = {
        "title": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ä - –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏",
        "description": """
        –ö–æ–º–ø–∞–Ω–∏—è-–ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞—Ä—É—à–∏–ª–∞ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è,
        –ø–æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–≤–∞—Ä –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞.
        –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∑—ã—Å–∫–∞–Ω–∏–µ –Ω–µ—É—Å—Ç–æ–π–∫–∏ –∏ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤.
        """,
        "case_type": "CORPORATE",
        "priority": "high",
        "client_id": "client_corp_001"
    }

    case_result = await case_agent.create_case(case_data)
    if not case_result.success:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–ª–æ")
        return

    case_id = case_result.case_id
    print(f"   ‚úÖ –î–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ: {case_id[:8]}...")

    # 2. AI –∞–Ω–∞–ª–∏–∑ –¥–µ–ª–∞
    print("\n2Ô∏è‚É£ AI –∞–Ω–∞–ª–∏–∑ –¥–µ–ª–∞...")
    analysis = await case_agent.analyze_case(CaseAnalysisRequest(
        case_id=case_id,
        analysis_type="strategy"
    ))

    if analysis:
        print(f"   üß† –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f})")
        print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis.recommendations)}")

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏...")
    doc_request = DocumentGenerationRequest(
        document_type=DocumentType.NOTICE,
        title="–ü—Ä–µ—Ç–µ–Ω–∑–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏",
        content_data={
            "supplier": "–û–û–û '–¢–µ—Ö–ü–æ—Å—Ç–∞–≤–∫–∞'",
            "buyer": "–û–û–û '–ü—Ä–æ–º–¢–µ—Ö'",
            "contract_number": "‚Ññ 145/2024",
            "violation": "–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º —Å—Ä–æ–∫–æ–≤",
            "damages": "500000 —Ä—É–±–ª–µ–π",
            "case_id": case_id
        },
        use_rag=True,
        auto_correct=False
    )

    doc_result = await writer_agent.generate_document(doc_request)
    if not doc_result.success:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        return

    print(f"   üìù –ü—Ä–µ—Ç–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–∫–∞—á–µ—Å—Ç–≤–æ: {doc_result.quality_score:.2f})")

    # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print("\n4Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏...")
    validation_request = ValidationRequest(
        content=doc_result.content,
        validation_type=ValidationType.LEGAL_COMPLIANCE,
        auto_correct=True
    )

    validation = await validator_agent.validate(validation_request)
    print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Ü–µ–Ω–∫–∞: {validation.overall_score:.2f})")
    print(f"      –ü—Ä–æ–±–ª–µ–º: {len(validation.issues)}")

    # 5. –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if validation.overall_score < 0.8:
        print("\n5Ô∏è‚É£ –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        improved = await writer_agent.improve_document(
            doc_result.document_id,
            "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ —É—Å–∏–ª–∏—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è"
        )

        if improved.success:
            print(f"   ‚ú® –î–æ–∫—É–º–µ–Ω—Ç —É–ª—É—á—à–µ–Ω (–Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {improved.quality_score:.2f})")

            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            final_validation = await validator_agent.validate(ValidationRequest(
                content=improved.content,
                validation_type=ValidationType.LEGAL_COMPLIANCE
            ))

            print(f"   üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {final_validation.overall_score:.2f}")

    # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    print("\n6Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞...")
    case_update = await case_agent.update_case(case_id, {
        "status": CaseStatus.IN_PROGRESS,
        "metadata": {
            "documents_generated": [doc_result.document_id],
            "last_action": "pretension_sent",
            "workflow_completed": True
        }
    })

    if case_update.success:
        print("   ‚úÖ –î–µ–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ workflow")

    # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n7Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
    case_stats = case_agent.get_stats()
    writer_stats = writer_agent.get_stats()
    validator_stats = validator_agent.get_stats()

    print(f"   üìä CaseAgent: {case_stats['total_cases']} –¥–µ–ª, {case_stats['analyses_performed']} –∞–Ω–∞–ª–∏–∑–æ–≤")
    print(f"   üìä WriterAgent: {writer_stats['documents_generated']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print(f"   üìä ValidatorAgent: {validator_stats['validations_performed']} –≤–∞–ª–∏–¥–∞—Ü–∏–π")

    print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


async def demo_advanced_features(case_agent, writer_agent, validator_agent):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüöÄ === Advanced Features Demo ===")

    # –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("üì¶ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    cases_data = [
        {
            "title": "–°–µ–º–µ–π–Ω—ã–π —Å–ø–æ—Ä - —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞",
            "description": "–†–∞–∑–¥–µ–ª —Å–æ–≤–º–µ—Å—Ç–Ω–æ –Ω–∞–∂–∏—Ç–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ —Å—É–ø—Ä—É–≥–æ–≤",
            "case_type": "FAMILY",
            "priority": "MEDIUM"
        },
        {
            "title": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ - —à—Ç—Ä–∞—Ñ –ì–ò–ë–î–î",
            "description": "–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏",
            "case_type": "ADMINISTRATIVE",
            "priority": "LOW"
        },
        {
            "title": "–£–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ - –∫—Ä–∞–∂–∞",
            "description": "–ó–∞—â–∏—Ç–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –≤ –∫—Ä–∞–∂–µ –∏–º—É—â–µ—Å—Ç–≤–∞",
            "case_type": "CRIMINAL",
            "priority": "CRITICAL"
        }
    ]

    created_cases = []
    for case_data in cases_data:
        result = await case_agent.create_case(case_data)
        if result.success:
            created_cases.append(result.case_id)

    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–µ–ª: {len(created_cases)}")

    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–µ–ª–∞–º
    print("\nüîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
    search_queries = [
        "–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã",
        "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã",
        "—É–≥–æ–ª–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞"
    ]

    for query in search_queries:
        results = await case_agent.search_cases(CaseSearchRequest(
            query=query,
            search_type="semantic",
            max_results=5
        ))
        print(f"   üéØ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(results)} –¥–µ–ª")

    # –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    print("\nüåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    multilang_request = DocumentGenerationRequest(
        document_type=DocumentType.LETTER,
        title="Business Correspondence",
        content_data={
            "recipient": "International Law Firm",
            "subject": "Legal consultation request",
            "content": "We need legal advice on international contract law"
        },
        language=Language.ENGLISH,
        style="business"
    )

    multilang_doc = await writer_agent.generate_document(multilang_request)
    if multilang_doc.success:
        print(f"   üá∫üá∏ English document generated (quality: {multilang_doc.quality_score:.2f})")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    if multilang_doc.success:
        translation = await writer_agent.translate_document(multilang_doc.document_id, Language.RUSSIAN)
        if translation.success:
            print(f"   üá∑üá∫ Translated to Russian (quality: {translation.quality_score:.2f})")

    # –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüîç –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è...")
    test_docs = [
        "–ö—Ä–∞—Ç–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        """
        –î–û–ì–û–í–û–† –ö–£–ü–õ–ò-–ü–†–û–î–ê–ñ–ò

        –ü—Ä–æ–¥–∞–≤–µ—Ü: –ò–≤–∞–Ω–æ–≤ –ò.–ò.
        –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ü–µ—Ç—Ä–æ–≤ –ü.–ü.
        –ü—Ä–µ–¥–º–µ—Ç: –ê–≤—Ç–æ–º–æ–±–∏–ª—å Toyota Camry 2020 –≥–æ–¥–∞
        –¶–µ–Ω–∞: 1,500,000 —Ä—É–±–ª–µ–π

        –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–æ—Ä–æ–Ω
        """,
        """
        –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏!

        –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –¥–µ–ª—É ‚Ññ 12345.
        –ü—Ä–æ—Å–∏–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.

        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ñ–∏—Ä–º–∞
        """
    ]

    validation_results = []
    for i, doc in enumerate(test_docs, 1):
        validation = await validator_agent.validate(ValidationRequest(
            content=doc,
            validation_type=ValidationType.CONTENT_QUALITY,
            auto_correct=True
        ))
        validation_results.append(validation)
        print(f"   üìã –î–æ–∫—É–º–µ–Ω—Ç {i}: –æ—Ü–µ–Ω–∫–∞ {validation.overall_score:.2f}")

    avg_quality = sum(v.overall_score for v in validation_results) / len(validation_results)
    print(f"   üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.2f}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("ü§ñ MEGA AGENT PRO - Enhanced Agents Integration Demo")
    print("=" * 70)

    try:
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        llm_router, embedder, rag_system = await setup_shared_infrastructure()

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        case_agent, writer_agent, validator_agent = await setup_agents(llm_router, embedder, rag_system)

        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        case_id = await demo_case_agent(case_agent)
        document_id = await demo_writer_agent(writer_agent, case_id)
        validation_result = await demo_validator_agent(validator_agent, document_id)

        # 4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow
        await demo_integrated_workflow(case_agent, writer_agent, validator_agent)

        # 5. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        await demo_advanced_features(case_agent, writer_agent, validator_agent)

        print("\n‚úÖ === Enhanced Agents Demo Complete ===")

        print("\nüéØ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM Router –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("   üß† RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–π —Ä–∞–±–æ—Ç—ã")
        print("   üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¥–µ–ª–∞–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
        print("   ‚úÖ AI –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
        print("   üìä –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("   üåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        print("   üîÑ End-to-end –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ workflow")

        print("\nüöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print("   üìÅ AI-powered —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–º–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º")
        print("   üìù –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("   ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
        print("   üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        print("   ü§ù –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤")
        print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        case_stats = case_agent.get_stats()
        writer_stats = writer_agent.get_stats()
        validator_stats = validator_agent.get_stats()

        print(f"   üìÅ CaseAgent: {case_stats['total_cases']} –¥–µ–ª, {case_stats['analyses_performed']} –∞–Ω–∞–ª–∏–∑–æ–≤")
        print(f"   üìù WriterAgent: {writer_stats['documents_generated']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"   ‚úÖ ValidatorAgent: {validator_stats['validations_performed']} –≤–∞–ª–∏–¥–∞—Ü–∏–π")

        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å LLM/RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå Demo error: {e}")
        logger.exception("Demo failed")


if __name__ == "__main__":
    asyncio.run(main())