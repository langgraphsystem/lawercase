"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CaseAgent functionality.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ CaseAgent:
- –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª
- CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å workflow
"""

from __future__ import annotations

import asyncio
import uuid

from core.memory.memory_manager import MemoryManager
from core.groupagents.case_agent import CaseAgent
from core.groupagents.models import CaseType, CasePriority, CaseQuery
from core.orchestration.workflow_graph import WorkflowState, build_case_workflow
from core.orchestration.pipeline_manager import run


async def demo_case_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CaseAgent"""
    print("üöÄ === CaseAgent Demo ===\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    memory = MemoryManager()
    case_agent = CaseAgent(memory_manager=memory)

    user_id = "demo-user-001"

    print("1. üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞
    case_data = {
        "title": "Immigration Case - John Doe",
        "description": "H-1B visa extension application for software engineer",
        "case_type": CaseType.IMMIGRATION,
        "priority": CasePriority.HIGH,
        "client_id": "client-123",
        "assigned_lawyer": "lawyer-456",
        "tags": ["h1b", "visa", "extension", "software-engineer"]
    }

    case_record = await case_agent.acreate_case(
        user_id=user_id,
        case_data=case_data
    )

    print(f"‚úÖ –î–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ: {case_record.case_id}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {case_record.title}")
    print(f"   –¢–∏–ø: {case_record.case_type}")
    print(f"   –°—Ç–∞—Ç—É—Å: {case_record.status}")
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {case_record.priority}\n")

    print("2. üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª–∞...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª–∞
    retrieved_case = await case_agent.aget_case(case_record.case_id, user_id)
    print(f"‚úÖ –î–µ–ª–æ –ø–æ–ª—É—á–µ–Ω–æ: {retrieved_case.title}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {retrieved_case.description}\n")

    print("3. ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞...")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞
    updates = {
        "status": "active",
        "description": "H-1B visa extension application for senior software engineer - priority case",
        "change_reason": "Updated job title and priority status"
    }

    updated_case = await case_agent.aupdate_case(
        case_id=case_record.case_id,
        updates=updates,
        user_id=user_id
    )

    print(f"‚úÖ –î–µ–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–≤–µ—Ä—Å–∏—è {updated_case.version})")
    print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {updated_case.status}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {updated_case.description}\n")

    print("4. üîç –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞
    case_data_2 = {
        "title": "Corporate Law - Startup Incorporation",
        "description": "Incorporation documents for tech startup",
        "case_type": CaseType.CORPORATE,
        "priority": CasePriority.MEDIUM,
        "client_id": "client-789",
        "assigned_lawyer": "lawyer-456",
        "tags": ["incorporation", "startup", "tech", "documents"]
    }

    case_record_2 = await case_agent.acreate_case(
        user_id=user_id,
        case_data=case_data_2
    )

    print(f"‚úÖ –í—Ç–æ—Ä–æ–µ –¥–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ: {case_record_2.case_id}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {case_record_2.title}\n")

    print("5. üîé –ü–æ–∏—Å–∫ –¥–µ–ª...")

    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–µ–ª
    search_query = CaseQuery(limit=10)
    all_cases = await case_agent.asearch_cases(search_query, user_id)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {len(all_cases)}")
    for case in all_cases:
        print(f"   - {case.title} ({case.case_type}, {case.status})")
    print()

    # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É
    print("6. üéØ –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –¥–µ–ª–∞ (IMMIGRATION)...")

    immigration_query = CaseQuery(case_type=CaseType.IMMIGRATION)
    immigration_cases = await case_agent.asearch_cases(immigration_query, user_id)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–º–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–ª: {len(immigration_cases)}")
    for case in immigration_cases:
        print(f"   - {case.title}")
    print()

    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    print("7. üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (H-1B)...")

    text_query = CaseQuery(query="H-1B")
    h1b_cases = await case_agent.asearch_cases(text_query, user_id)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª —Å 'H-1B': {len(h1b_cases)}")
    for case in h1b_cases:
        print(f"   - {case.title}")
    print()

    print("8. üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–µ—Ä—Å–∏–π –¥–µ–ª–∞...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    versions = await case_agent.aget_case_versions(case_record.case_id)
    print(f"‚úÖ –í–µ—Ä—Å–∏–π –¥–µ–ª–∞: {len(versions)}")
    for version in versions:
        print(f"   - –í–µ—Ä—Å–∏—è {version.version_number}: {version.change_reason}")
        print(f"     –ò–∑–º–µ–Ω–µ–Ω–æ: {version.changed_at}")
    print()

    return case_record.case_id


async def demo_workflow_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CaseAgent —Å workflow"""
    print("üîÑ === Workflow Integration Demo ===\n")

    memory = MemoryManager()
    graph = build_case_workflow(memory)
    compiled_graph = graph.compile()

    user_id = "demo-user-002"
    thread_id = str(uuid.uuid4())

    print("1. üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ workflow...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ workflow
    initial_state = WorkflowState(
        thread_id=thread_id,
        user_id=user_id,
        case_operation="create",
        case_data={
            "title": "Family Law - Divorce Case",
            "description": "Divorce proceedings with child custody considerations",
            "case_type": CaseType.FAMILY,
            "priority": CasePriority.HIGH,
            "client_id": "client-family-001",
            "tags": ["divorce", "custody", "family"]
        }
    )

    # –ó–∞–ø—É—Å–∫ workflow
    final_state = await run(compiled_graph, initial_state, thread_id=thread_id)

    print("‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω")

    # final_state - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ —É–∑–ª–æ–≤ –∫–∞–∫ –∫–ª—é—á–∞–º–∏
    # –ò–∑–≤–ª–µ–∫–∞–µ–º state –∏–∑ —É–∑–ª–∞ update_rmt (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª)
    if isinstance(final_state, dict) and 'update_rmt' in final_state:
        actual_state = final_state['update_rmt']
    else:
        actual_state = final_state

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if isinstance(actual_state, dict):
        case_id = actual_state.get('case_id', 'unknown')
        case_result = actual_state.get('case_result', {})
        rmt_slots = actual_state.get('rmt_slots', {})
    else:
        case_id = getattr(actual_state, 'case_id', 'unknown')
        case_result = getattr(actual_state, 'case_result', {}) or {}
        rmt_slots = getattr(actual_state, 'rmt_slots', {}) or {}

    print(f"   Case ID: {case_id}")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {case_result.get('operation', 'unknown') if case_result else 'none'}")
    print(f"   RMT slots: {list(rmt_slots.keys()) if rmt_slots else []}")

    if case_result and 'case' in case_result:
        case = case_result['case']
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞: {case['title']}")
    print()

    print("2. üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ workflow...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ workflow
    get_state = WorkflowState(
        thread_id=str(uuid.uuid4()),
        user_id=user_id,
        case_operation="get",
        case_id=case_id
    )

    get_final_state = await run(compiled_graph, get_state)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ workflow
    if isinstance(get_final_state, dict) and 'update_rmt' in get_final_state:
        get_actual_state = get_final_state['update_rmt']
    else:
        get_actual_state = get_final_state

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if isinstance(get_actual_state, dict):
        get_case_result = get_actual_state.get('case_result', {})
    else:
        get_case_result = getattr(get_actual_state, 'case_result', {}) or {}

    print("‚úÖ –î–µ–ª–æ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ workflow")
    if get_case_result and 'case' in get_case_result:
        case = get_case_result['case']
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {case['title']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {case['description']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {case['status']}")
    print()

    print("3. üîé –ü–æ–∏—Å–∫ –¥–µ–ª —á–µ—Ä–µ–∑ workflow...")

    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ workflow
    search_state = WorkflowState(
        thread_id=str(uuid.uuid4()),
        user_id=user_id,
        case_operation="search",
        case_data={
            "case_type": CaseType.FAMILY,
            "limit": 5
        }
    )

    search_final_state = await run(compiled_graph, search_state)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ workflow
    if isinstance(search_final_state, dict) and 'update_rmt' in search_final_state:
        search_actual_state = search_final_state['update_rmt']
    else:
        search_actual_state = search_final_state

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if isinstance(search_actual_state, dict):
        search_case_result = search_actual_state.get('case_result', {})
    else:
        search_case_result = getattr(search_actual_state, 'case_result', {}) or {}

    print("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ workflow")
    if search_case_result:
        count = search_case_result.get('count', 0)
        print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {count}")

        cases = search_case_result.get('cases', [])
        for case in cases:
            print(f"   - {case['title']} ({case['case_type']})")
    print()

    return case_id


async def demo_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("‚ö†Ô∏è === Error Handling Demo ===\n")

    memory = MemoryManager()
    case_agent = CaseAgent(memory_manager=memory)
    user_id = "demo-user-003"

    print("1. üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –¥–µ–ª–æ...")

    try:
        await case_agent.aget_case("non-existent-case-id", user_id)
    except Exception as e:
        print(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    print()

    print("2. ‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥–µ–ª–æ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    try:
        invalid_case_data = {
            "title": "",  # –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            "description": "Short",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            "case_type": CaseType.IMMIGRATION,
            "client_id": "",  # –ü—É—Å—Ç–æ–π client_id
        }
        await case_agent.acreate_case(user_id, invalid_case_data)
    except Exception as e:
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {type(e).__name__}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    print()

    print("3. üîí –¢–µ—Å—Ç optimistic locking...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞
    valid_case_data = {
        "title": "Test Case for Locking",
        "description": "This case will be used to test optimistic locking mechanism",
        "case_type": CaseType.CIVIL,
        "client_id": "client-test-001",
    }

    case_record = await case_agent.acreate_case(user_id, valid_case_data)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ: {case_record.case_id}")

    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    try:
        await case_agent.aupdate_case(
            case_id=case_record.case_id,
            updates={"title": "Updated Title"},
            user_id=user_id,
            expected_version=999  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
        )
    except Exception as e:
        print(f"‚úÖ Optimistic locking —Å—Ä–∞–±–æ—Ç–∞–ª: {type(e).__name__}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ MEGA AGENT PRO - CaseAgent Demonstration")
    print("=" * 50)
    print()

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        case_id_1 = await demo_case_operations()

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å workflow
        case_id_2 = await demo_workflow_integration()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await demo_error_handling()

        print("üéâ === Demo Completed Successfully ===")
        print(f"Created cases: {case_id_1}, {case_id_2}")
        print("All CaseAgent functionality demonstrated!")

    except Exception as e:
        print(f"‚ùå Demo failed with error: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())