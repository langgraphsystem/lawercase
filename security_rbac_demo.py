#!/usr/bin/env python3
"""
Security & RBAC System Demo –¥–ª—è mega_agent_pro.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π
2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
3. –°–µ—Å—Å–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
4. –ü—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
5. Rate limiting –∏ security features
6. Audit logging
7. Multi-factor authentication
8. API key management

–ó–∞–ø—É—Å–∫:
    python security_rbac_demo.py
"""

import asyncio
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from core.security import (
    PermissionType,
    RoleType,
    AuthenticationMethod,
    create_default_rbac_manager,
    create_testing_rbac_manager,
    initialize_default_users,
)


async def demo_user_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    print("üë• === User Management Demo ===\n")

    rbac_manager = create_default_rbac_manager()

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("üìù Creating users...")
    users = await initialize_default_users(rbac_manager)

    for username, user in users.items():
        print(f"   ‚úÖ {username}: {user.user_id} (roles: {user.roles})")

    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lawyer = await rbac_manager.get_user_by_username("lawyer")
    if lawyer:
        print(f"üîç Found lawyer: {lawyer.username} ({lawyer.user_id})")
        print(f"   üìß Email: {lawyer.email}")
        print(f"   üè¢ Tenant: {lawyer.tenant_id}")
        print(f"   üé≠ Roles: {lawyer.roles}")
        print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
    print("üé≠ Role assignment demo...")
    paralegal = await rbac_manager.get_user_by_username("paralegal")
    if paralegal:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–æ–ª—å
        success = await rbac_manager.assign_role(paralegal.user_id, "viewer", "admin")
        print(f"   ‚úÖ Assigned 'viewer' role to paralegal: {success}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
        updated_paralegal = await rbac_manager.get_user(paralegal.user_id)
        print(f"   üìã Updated roles: {updated_paralegal.roles}")

    print()


async def demo_role_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏."""
    print("üé≠ === Role Management Demo ===\n")

    rbac_manager = create_default_rbac_manager()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
    print("üìã Available roles:")
    roles = await rbac_manager.list_roles()
    for role in roles:
        print(f"   üéØ {role.name} ({role.type.value})")
        print(f"      üìù {role.description}")
        print(f"      üîê Permissions: {len(role.permissions)}")
        for perm in role.permissions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            print(f"         - {perm.name.value}")
        if len(role.permissions) > 3:
            print(f"         ... and {len(role.permissions) - 3} more")
        print()

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å
    print("üÜï Creating custom role...")
    custom_permissions = [
        PermissionType.CASE_READ,
        PermissionType.DOCUMENT_READ,
        PermissionType.DATA_SEARCH
    ]

    custom_role = await rbac_manager.create_role(
        name="custom_researcher",
        role_type=RoleType.VIEWER,
        permissions=custom_permissions,
        description="Custom role for research tasks"
    )

    print(f"   ‚úÖ Created custom role: {custom_role.name}")
    print(f"   üîê With permissions: {[p.value for p in custom_permissions]}")
    print()


async def demo_session_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏."""
    print("üîê === Session Management Demo ===\n")

    rbac_manager = create_default_rbac_manager()
    users = await initialize_default_users(rbac_manager)

    lawyer = users["lawyer"]

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    print("üöÄ Creating session...")
    session = await rbac_manager.create_session(
        user_id=lawyer.user_id,
        auth_method=AuthenticationMethod.PASSWORD,
        ip_address="192.168.1.100",
        user_agent="Mozilla/5.0 (Demo Browser)"
    )

    print(f"   ‚úÖ Session created: {session.session_id}")
    print(f"   ‚è∞ Expires at: {session.expires_at}")
    print(f"   üåê IP: {session.ip_address}")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    print("üîç Verifying session...")
    retrieved_session = await rbac_manager.get_session(session.session_id)
    if retrieved_session:
        print(f"   ‚úÖ Session valid: {retrieved_session.is_active}")
        print(f"   üë§ User: {retrieved_session.user_id}")
        print(f"   ‚è±Ô∏è Last activity: {retrieved_session.last_activity}")
    print()

    # –°–æ–∑–¥–∞–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    session2 = await rbac_manager.create_session(
        user_id=lawyer.user_id,
        auth_method=AuthenticationMethod.API_KEY,
        ip_address="10.0.0.50"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üìä User sessions:")
    user_sessions = await rbac_manager.session_store.get_user_sessions(lawyer.user_id)
    for sess in user_sessions:
        print(f"   üîë {sess.session_id[:8]}... ({sess.auth_method.value}) - {sess.ip_address}")

    print()

    # –ê–Ω–Ω—É–ª–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    print("‚ùå Invalidating session...")
    success = await rbac_manager.invalidate_session(session.session_id, "demo logout")
    print(f"   ‚úÖ Session invalidated: {success}")

    # –ê–Ω–Ω—É–ª–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üßπ Invalidating all user sessions...")
    count = await rbac_manager.invalidate_user_sessions(lawyer.user_id, "security reset")
    print(f"   ‚úÖ Invalidated {count} sessions")
    print()


async def demo_authorization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    print("üõ°Ô∏è === Authorization Demo ===\n")

    rbac_manager = create_default_rbac_manager()
    users = await initialize_default_users(rbac_manager)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    test_cases = [
        ("lawyer", PermissionType.CASE_CREATE, "Should be allowed"),
        ("lawyer", PermissionType.SYSTEM_CONFIG, "Should be denied"),
        ("client", PermissionType.CASE_READ, "Should be allowed"),
        ("client", PermissionType.CASE_DELETE, "Should be denied"),
        ("admin", PermissionType.USER_CREATE, "Should be allowed"),
        ("viewer", PermissionType.DOCUMENT_UPDATE, "Should be denied"),
        ("super_admin", PermissionType.SYSTEM_BACKUP, "Should be allowed"),
    ]

    for username, permission, expected in test_cases:
        user = users[username]
        response = await rbac_manager.check_permission(
            user_id=user.user_id,
            permission=permission
        )

        status = "‚úÖ GRANTED" if response.granted else "‚ùå DENIED"
        print(f"   {status} {username:12} {permission.value:20} ({expected})")
        if response.reason:
            print(f"      üí≠ Reason: {response.reason}")

    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    print("üéØ Context-based authorization demo...")
    lawyer = users["lawyer"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É
    response = await rbac_manager.check_permission(
        user_id=lawyer.user_id,
        permission=PermissionType.CASE_READ,
        resource="case_123",
        context={"case_id": "case_123", "assigned_lawyer": lawyer.user_id}
    )

    status = "‚úÖ GRANTED" if response.granted else "‚ùå DENIED"
    print(f"   {status} Lawyer access to specific case")
    print()


async def demo_authentication():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("üîë === Authentication Demo ===\n")

    # –°–æ–∑–¥–∞–µ–º authentication manager —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    rbac_manager, auth_manager = create_testing_rbac_manager()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è
    print("üîê Password validation demo...")
    test_passwords = [
        "123",           # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "password",      # –ü—Ä–æ—Å—Ç–æ–π
        "Password123!",  # –•–æ—Ä–æ—à–∏–π
    ]

    for password in test_passwords:
        is_valid, errors = auth_manager.password_validator.validate(password)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"   {status} '{password}': {'Valid' if is_valid else ', '.join(errors)}")

    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    print("üîí Password hashing demo...")
    password = "SecurePassword123!"
    hash_result = auth_manager.hash_password(password)

    print(f"   üìù Password: {password}")
    print(f"   üßÇ Salt: {hash_result.salt[:16]}...")
    print(f"   #Ô∏è‚É£ Hash: {hash_result.hash[:32]}...")
    print(f"   üîß Algorithm: {hash_result.algorithm}")
    print(f"   üîÑ Iterations: {hash_result.iterations}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    is_correct = auth_manager.verify_password(password, hash_result)
    is_wrong = auth_manager.verify_password("WrongPassword", hash_result)

    print(f"   ‚úÖ Correct password verification: {is_correct}")
    print(f"   ‚ùå Wrong password verification: {is_wrong}")
    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if auth_manager.jwt_manager:
        print("üé´ JWT token demo...")
        user_id = "test_user_123"

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        token_pair = auth_manager.jwt_manager.create_token_pair(user_id)
        print(f"   üéüÔ∏è Access token: {token_pair.access_token[:50]}...")
        print(f"   üîÑ Refresh token: {token_pair.refresh_token[:50]}...")
        print(f"   ‚è∞ Expires in: {token_pair.expires_in} seconds")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        payload = auth_manager.jwt_manager.verify_token(token_pair.access_token)
        if payload:
            print(f"   ‚úÖ Token valid for user: {payload.get('sub')}")
            print(f"   üéØ Token type: {payload.get('type')}")

        print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º API –∫–ª—é—á–∏
    print("üóùÔ∏è API key demo...")
    api_key = auth_manager.api_key_manager.generate_key(
        user_id="test_user_123",
        name="Demo API Key",
        permissions=["case:read", "document:read"]
    )

    print(f"   üîë Generated key: {api_key.key}")
    print(f"   üìù Name: {api_key.name}")
    print(f"   üîê Permissions: {api_key.permissions}")
    print(f"   ‚è∞ Expires: {api_key.expires_at}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    verified_key = auth_manager.api_key_manager.verify_key(api_key.key)
    if verified_key:
        print("   ‚úÖ Key verification successful")
        print(f"   üë§ User ID: {verified_key.user_id}")
        print(f"   ‚è±Ô∏è Last used: {verified_key.last_used}")

    print()


async def demo_rate_limiting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è rate limiting."""
    print("üö¶ === Rate Limiting Demo ===\n")

    rbac_manager, auth_manager = create_testing_rbac_manager()
    rate_limiter = auth_manager.rate_limiter

    identifier = "demo_user"

    print("üîÑ Testing rate limiting...")
    print(f"   Max attempts: {rate_limiter.config.max_attempts}")
    print(f"   Window: {rate_limiter.config.window_minutes} minutes")
    print(f"   Lockout: {rate_limiter.config.lockout_minutes} minutes")
    print()

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    for attempt in range(1, 8):
        allowed, locked_until = rate_limiter.is_allowed(identifier)

        if allowed:
            print(f"   Attempt {attempt}: ‚úÖ Allowed")
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            rate_limiter.record_attempt(identifier, success=False)
        else:
            print(f"   Attempt {attempt}: ‚ùå Blocked (locked until {locked_until})")

    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
    print("üîì Simulating successful authentication...")
    rate_limiter.record_attempt(identifier, success=True)

    allowed, _ = rate_limiter.is_allowed(identifier)
    print(f"   After successful auth: {'‚úÖ Allowed' if allowed else '‚ùå Still blocked'}")
    print()


async def demo_audit_logging():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è audit logging."""
    print("üìã === Audit Logging Demo ===\n")

    rbac_manager = create_default_rbac_manager()
    users = await initialize_default_users(rbac_manager)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    lawyer = users["lawyer"]
    client = users["client"]

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏
    lawyer_session = await rbac_manager.create_session(
        user_id=lawyer.user_id,
        auth_method=AuthenticationMethod.PASSWORD,
        ip_address="192.168.1.100"
    )

    client_session = await rbac_manager.create_session(
        user_id=client.user_id,
        auth_method=AuthenticationMethod.API_KEY,
        ip_address="192.168.1.200"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await rbac_manager.check_permission(
        user_id=lawyer.user_id,
        permission=PermissionType.CASE_CREATE,
        session_id=lawyer_session.session_id
    )

    await rbac_manager.check_permission(
        user_id=client.user_id,
        permission=PermissionType.CASE_DELETE,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
        session_id=client_session.session_id
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º audit —Å–æ–±—ã—Ç–∏—è
    print("üìä Recent audit events:")
    events = await rbac_manager.get_audit_events(limit=10)

    for event in events:
        print(f"   üïê {event.timestamp.strftime('%H:%M:%S')} {event.event_type}")
        print(f"      üë§ User: {event.user_id}")
        print(f"      üéØ Action: {event.action}")
        print(f"      üìà Result: {event.result}")
        if event.details:
            print(f"      üìù Details: {event.details}")
        print()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üìà User activity summary:")
    lawyer_activity = await rbac_manager.get_user_activity(lawyer.user_id, days=1)

    print("   üë§ Lawyer activity:")
    print(f"      üìä Total events: {lawyer_activity['total_events']}")
    print(f"      ‚úÖ Successful logins: {lawyer_activity['successful_logins']}")
    print(f"      ‚ùå Permission denials: {lawyer_activity['permission_denials']}")
    print(f"      üìÖ Unique days: {lawyer_activity['unique_days']}")
    print(f"      ‚è∞ Last activity: {lawyer_activity['last_activity']}")

    if lawyer_activity['event_types']:
        print("      üìã Event types:")
        for event_type, count in lawyer_activity['event_types'].items():
            print(f"         - {event_type}: {count}")

    print()


async def demo_multi_factor_auth():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è multi-factor authentication."""
    print("üîê === Multi-Factor Authentication Demo ===\n")

    rbac_manager, auth_manager = create_testing_rbac_manager()
    mfa = auth_manager.mfa

    user_id = "test_user_123"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP —Å–µ–∫—Ä–µ—Ç
    print("üîë OTP Setup...")
    otp_secret = mfa.generate_otp_secret()
    print(f"   üîê OTP Secret: {otp_secret}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º backup –∫–æ–¥—ã
    backup_codes = mfa.generate_backup_codes(5)
    print(f"   üóùÔ∏è Backup codes: {backup_codes}")
    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("üì± Verification process...")

    # –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    verification_id = mfa.start_verification(user_id, "sms")
    print(f"   üöÄ Started verification: {verification_id}")

    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–¥ –±—ã–ª –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    verification_data = mfa.pending_verifications.get(verification_id)
    if verification_data:
        demo_code = verification_data["code"]
        print(f"   üìß Verification code (demo): {demo_code}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        success = mfa.verify_code(verification_id, demo_code)
        print(f"   ‚úÖ Code verification: {'Success' if success else 'Failed'}")

        # –ü—Ä–æ–±—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
        wrong_success = mfa.verify_code("invalid_id", "123456")
        print(f"   ‚ùå Wrong code verification: {'Success' if wrong_success else 'Failed'}")

    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üõ°Ô∏è MEGA AGENT PRO - Security & RBAC System Demo")
    print("=" * 60)
    print()

    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await demo_user_management()
        await demo_role_management()
        await demo_session_management()
        await demo_authorization()
        await demo_authentication()
        await demo_rate_limiting()
        await demo_audit_logging()
        await demo_multi_factor_auth()

        print("‚úÖ === Security Demo Complete ===")
        print()
        print("üéØ Key Features Demonstrated:")
        print("   ‚úÖ User and role management")
        print("   ‚úÖ Session management with timeout")
        print("   ‚úÖ Fine-grained permission checking")
        print("   ‚úÖ Password hashing and validation")
        print("   ‚úÖ JWT token management")
        print("   ‚úÖ API key generation and verification")
        print("   ‚úÖ Rate limiting for brute force protection")
        print("   ‚úÖ Comprehensive audit logging")
        print("   ‚úÖ Multi-factor authentication support")
        print()
        print("üöÄ Next Steps:")
        print("   1. Integrate with persistent storage (PostgreSQL, MongoDB)")
        print("   2. Add Redis for session and rate limiting storage")
        print("   3. Implement real OTP/SMS providers")
        print("   4. Add SSO integration (SAML, OAuth)")
        print("   5. Create middleware for automatic authorization checks")

    except Exception as e:
        logger.error(f"Demo failed: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())