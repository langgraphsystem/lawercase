"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã mega_agent_pro.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ—Ö —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:
- MegaAgent (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è)
- CaseAgent (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–º–∏)
- WriterAgent (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
- ValidatorAgent (–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π)
- SupervisorAgent (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è)
- RAGPipelineAgent (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫)
"""

from __future__ import annotations

import asyncio
import tempfile
import uuid
from datetime import datetime
from pathlib import Path

from core.memory.memory_manager import MemoryManager
from core.groupagents.mega_agent import MegaAgent, MegaAgentCommand, CommandType, UserRole
from core.groupagents.case_agent import CaseAgent
from core.groupagents.writer_agent import WriterAgent, DocumentRequest, DocumentType
from core.groupagents.validator_agent import ValidatorAgent, ValidationRequest, ValidationType
from core.groupagents.supervisor_agent import SupervisorAgent
from core.groupagents.rag_pipeline_agent import RAGPipelineAgent, SearchQuery, SearchStrategy
from core.groupagents.models import CaseType, CasePriority


async def demo_mega_agent_orchestration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MegaAgent –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üéØ === MegaAgent Orchestration Demo ===\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    memory = MemoryManager()
    mega_agent = MegaAgent(memory_manager=memory)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = "demo-lawyer-001"
    await mega_agent.set_user_role(user_id, UserRole.LAWYER)

    print("1. üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ MegaAgent...")

    # –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ª–∞
    create_case_command = MegaAgentCommand(
        user_id=user_id,
        command_type=CommandType.CASE,
        action="create",
        payload={
            "title": "Complex Immigration Case - Tech Startup Visa",
            "description": "H-1B visa application for international tech startup employees with complex documentation requirements",
            "case_type": CaseType.IMMIGRATION,
            "priority": CasePriority.HIGH,
            "client_id": "client-tech-startup-001",
            "assigned_lawyer": user_id,
            "tags": ["h1b", "startup", "tech", "complex"]
        }
    )

    case_response = await mega_agent.handle_command(create_case_command)
    print(f"‚úÖ –î–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ MegaAgent")
    print(f"   Case ID: {case_response.result.get('case_id', 'unknown')}")
    print(f"   Success: {case_response.success}")
    print()

    case_id = case_response.result.get("case_id")

    print("2. üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ MegaAgent...")

    # –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞
    generate_letter_command = MegaAgentCommand(
        user_id=user_id,
        command_type=CommandType.GENERATE,
        action="letter",
        payload={
            "document_type": DocumentType.LETTER,
            "content_data": {
                "recipient": "USCIS Officer",
                "sender": "Legal Representative",
                "subject": "H-1B Visa Application - Supporting Documentation",
                "content": "We are submitting the H-1B visa application for our client's technology startup employees. This application includes comprehensive documentation demonstrating the specialized nature of the positions and the company's capacity to support these roles."
            },
            "case_id": case_id,
            "approval_required": True
        }
    )

    letter_response = await mega_agent.handle_command(generate_letter_command)
    print(f"‚úÖ –ü–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ MegaAgent")
    print(f"   Document ID: {letter_response.result.get('document_id', 'unknown')}")
    print(f"   Success: {letter_response.success}")
    print()

    return case_id, letter_response.result.get('document_id')


async def demo_supervisor_task_orchestration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SupervisorAgent –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print("üé≠ === SupervisorAgent Task Orchestration Demo ===\n")

    memory = MemoryManager()
    supervisor = SupervisorAgent(memory_manager=memory)
    user_id = "demo-supervisor-001"

    print("1. üîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏...")

    # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, —Ç—Ä–µ–±—É—é—â–∞—è –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    complex_task = "Prepare a comprehensive immigration case package including document generation, legal research, validation, and quality control for a tech startup H-1B application"

    analysis = await supervisor.analyze_task(complex_task)
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.complexity}")
    print(f"   –¢—Ä–µ–±—É–µ–º—ã–µ –∞–≥–µ–Ω—Ç—ã: {[agent.value for agent in analysis.required_agents]}")
    print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {analysis.execution_strategy}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score:.2f}")
    print()

    print("2. üìã –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏...")

    subtasks = await supervisor.decompose_task(complex_task, analysis)
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ {len(subtasks)} –ø–æ–¥–∑–∞–¥–∞—á:")
    for i, subtask in enumerate(subtasks, 1):
        print(f"   {i}. {subtask.description}")
        print(f"      –ê–≥–µ–Ω—Ç: {subtask.agent_type.value}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {subtask.priority}")
    print()

    print("3. üöÄ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

    execution_result = await supervisor.orchestrate_workflow(complex_task, user_id)
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    print(f"   –£—Å–ø–µ—Ö: {execution_result.success}")
    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_result.execution_time:.2f}s")
    print(f"   –ü–æ–¥–∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(execution_result.results)}")

    if execution_result.final_result:
        print(f"   –û–±—â–∏–π —É—Å–ø–µ—Ö: {execution_result.final_result.get('overall_success', False)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á: {execution_result.final_result.get('successful_subtasks', 0)}")
    print()

    return execution_result


async def demo_writer_agent_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π WriterAgent"""
    print("‚úçÔ∏è === WriterAgent Features Demo ===\n")

    memory = MemoryManager()
    writer = WriterAgent(memory_manager=memory)
    user_id = "demo-writer-001"

    print("1. üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    template_data = {
        "name": "H-1B Cover Letter Template",
        "document_type": DocumentType.LETTER,
        "language": "en",
        "template_content": """
Dear {recipient},

Subject: H-1B Visa Petition for {employee_name} - {position_title}

I am writing to submit the H-1B visa petition for {employee_name}, who will be employed as {position_title} at {company_name}.

Key Details:
- Employee: {employee_name}
- Position: {position_title}
- Start Date: {start_date}
- Salary: {salary}

{additional_details}

We have prepared all required documentation and look forward to your favorable consideration of this petition.

Sincerely,
{sender_name}
{sender_title}
        """.strip(),
        "variables": ["recipient", "employee_name", "position_title", "company_name",
                     "start_date", "salary", "additional_details", "sender_name", "sender_title"]
    }

    template = await writer.acreate_template(template_data, user_id)
    print(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {template.name}")
    print(f"   Template ID: {template.template_id}")
    print()

    print("2. üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —à–∞–±–ª–æ–Ω–æ–º...")

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞
    request = DocumentRequest(
        document_type=DocumentType.LETTER,
        template_id=template.template_id,
        content_data={
            "recipient": "USCIS Vermont Service Center",
            "employee_name": "Alex Chen",
            "position_title": "Senior Software Engineer",
            "company_name": "TechStart Innovations Inc.",
            "start_date": "January 1, 2024",
            "salary": "$95,000 annually",
            "additional_details": "The position requires specialized knowledge in machine learning and distributed systems.",
            "sender_name": "Sarah Johnson",
            "sender_title": "Immigration Attorney"
        },
        approval_required=True
    )

    document = await writer.agenerate_letter(request, user_id)
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    print(f"   Document ID: {document.document_id}")
    print(f"   Title: {document.title}")
    print(f"   Approval Status: {document.approval_status}")
    print()

    print("3. üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...")

    pdf_path = await writer.agenerate_document_pdf(document.document_id, user_id)
    print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {pdf_path}")
    print()

    return document


async def demo_validator_agent_capabilities():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ValidatorAgent"""
    print("üîç === ValidatorAgent Capabilities Demo ===\n")

    memory = MemoryManager()
    validator = ValidatorAgent(memory_manager=memory)
    user_id = "demo-validator-001"

    print("1. ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞...")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞
    valid_case_data = {
        "title": "Immigration Case - Software Engineer Visa",
        "description": "H-1B visa application for experienced software engineer with specialized skills in distributed systems and machine learning",
        "case_type": "immigration",
        "client_id": "client-001",
        "assigned_lawyer": "lawyer-001",
        "priority": "high"
    }

    validation_request = ValidationRequest(
        validation_type=ValidationType.CASE_DATA,
        data=valid_case_data,
        auto_fix=True
    )

    validation_result = await validator.avalidate(validation_request, user_id)
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"   –í–∞–ª–∏–¥–Ω–æ: {validation_result.is_valid}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {validation_result.confidence_score:.2f}")
    print(f"   –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(validation_result.issues)}")
    print(f"   –†–µ–∑—é–º–µ: {validation_result.summary}")
    print()

    print("2. ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ—à–∏–±–∫–∞–º–∏
    invalid_case_data = {
        "title": "",  # –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "description": "Short",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        "case_type": "invalid_type",  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        "client_id": "",  # –ü—É—Å—Ç–æ–π client_id
        "priority": "medium"
    }

    invalid_request = ValidationRequest(
        validation_type=ValidationType.CASE_DATA,
        data=invalid_case_data,
        auto_fix=True
    )

    invalid_result = await validator.avalidate(invalid_request, user_id)
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"   –í–∞–ª–∏–¥–Ω–æ: {invalid_result.is_valid}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {invalid_result.confidence_score:.2f}")
    print(f"   –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(invalid_result.issues)}")
    print(f"   –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(invalid_result.corrections)}")

    for issue in invalid_result.issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
        print(f"   - {issue.message} (Severity: {issue.severity})")
    print()

    print("3. ü§ù MAGCC Consensus –¥–ª—è —Å–ø–æ—Ä–Ω–æ–≥–æ —Å–ª—É—á–∞—è...")

    from core.groupagents.validator_agent import ConsensusRequest

    # –°–ø–æ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    consensus_request = ConsensusRequest(
        question="What is the best approach for this complex H-1B case with multiple technical specializations?",
        options=[
            "Focus on AI/ML expertise with detailed technical documentation",
            "Emphasize distributed systems experience with architecture examples",
            "Combine both specializations with comprehensive portfolio"
        ],
        validation_data=valid_case_data,
        required_confidence=0.7
    )

    consensus_result = await validator.amagcc_consensus(consensus_request, user_id)
    print(f"‚úÖ MAGCC –∫–æ–Ω—Å–µ–Ω—Å—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
    print(f"   –ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {consensus_result.achieved}")
    print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {consensus_result.selected_option}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {consensus_result.confidence:.2f}")
    print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {consensus_result.iterations}")
    print()

    return validation_result, consensus_result


async def demo_rag_pipeline_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAGPipelineAgent"""
    print("üîç === RAGPipelineAgent Search Demo ===\n")

    memory = MemoryManager()
    rag = RAGPipelineAgent(memory_manager=memory)
    user_id = "demo-rag-001"

    print("1. üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    test_doc_content = """
    H-1B Visa Requirements and Process

    The H-1B visa is a non-immigrant visa that allows U.S. companies to employ foreign workers
    in specialty occupations that require specialized knowledge and a bachelor's degree or higher
    in the specific specialty, or its equivalent.

    Key Requirements:
    - Bachelor's degree or higher in a specific specialty
    - Job offer from a U.S. employer
    - Labor Condition Application (LCA) approval
    - Specialized knowledge in the field

    Application Process:
    1. Employer files Labor Condition Application (LCA)
    2. Employer submits Form I-129 petition
    3. Employee applies for visa at consulate (if outside U.S.)
    4. Entry into the United States

    Technical Positions:
    Software engineers, data scientists, and machine learning engineers are common H-1B recipients
    due to the specialized nature of their work and educational requirements.
    """

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
        f.write(test_doc_content)
        temp_file_path = f.name

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        processed_doc = await rag.aprocess_document(temp_file_path, user_id=user_id)
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print(f"   Document ID: {processed_doc.document_id}")
        print(f"   –ß–∞–Ω–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(processed_doc.chunks)}")
        print(f"   –î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(processed_doc.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print()

        print("2. üîç –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫...")

        # –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = SearchQuery(
            query_text="software engineer H-1B requirements technical positions",
            strategy=SearchStrategy.HYBRID,
            limit=5
        )

        search_results = await rag.asearch(search_query, user_id)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results.results)}")
        print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_results.search_time:.3f}s")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {search_results.strategy_used}")
        print()

        if search_results.results:
            print("   –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(search_results.results[:3], 1):
                print(f"   {i}. Score: {result.score:.3f}")
                print(f"      {result.content[:100]}...")
                if result.highlights:
                    print(f"      Highlights: {result.highlights[0][:80]}...")
        print()

        print("3. üéØ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")

        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        semantic_query = SearchQuery(
            query_text="machine learning data scientist visa application",
            strategy=SearchStrategy.SEMANTIC_SIMILARITY,
            limit=3
        )

        semantic_results = await rag.asearch(semantic_query, user_id)
        print(f"‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(semantic_results.results)}")
        print(f"   –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {semantic_results.aggregated_content is not None}")
        print()

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        Path(temp_file_path).unlink(missing_ok=True)

    return search_results


async def demo_full_workflow_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üåê === Full Multi-Agent Workflow Integration ===\n")

    memory = MemoryManager()
    mega_agent = MegaAgent(memory_manager=memory)
    user_id = "demo-workflow-001"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏
    await mega_agent.set_user_role(user_id, UserRole.LAWYER)

    print("1. üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –¥–µ–ª–∞...")

    # –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –¥–µ–ª–∞
    complex_case_command = MegaAgentCommand(
        user_id=user_id,
        command_type=CommandType.CASE,
        action="create",
        payload={
            "title": "Multi-National Tech Company H-1B Batch Processing",
            "description": "Processing multiple H-1B applications for a tech company with employees from various countries requiring different documentation strategies",
            "case_type": CaseType.IMMIGRATION,
            "priority": CasePriority.HIGH,
            "client_id": "client-multinational-tech",
            "assigned_lawyer": user_id,
            "tags": ["h1b", "batch", "multinational", "tech", "complex"],
            "metadata": {
                "employee_count": 25,
                "countries": ["India", "China", "Brazil", "Germany", "UK"],
                "specializations": ["AI/ML", "DevOps", "Frontend", "Backend", "Data Science"]
            }
        }
    )

    case_response = await mega_agent.handle_command(complex_case_command)
    print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –¥–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ")
    print(f"   Case ID: {case_response.result.get('case_id')}")
    print()

    print("2. üìã –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–ª...")

    # –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ–ª
    search_command = MegaAgentCommand(
        user_id=user_id,
        command_type=CommandType.CASE,
        action="search",
        payload={
            "query": {
                "case_type": "immigration",
                "tags": ["h1b"],
                "limit": 5
            }
        }
    )

    search_response = await mega_agent.handle_command(search_command)
    print(f"‚úÖ –ü–æ–∏—Å–∫ –¥–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
    case_result = search_response.result.get('case_result', {}) if search_response.result else {}
    print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: {case_result.get('count', 0)}")
    print()

    print("3. üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è cover letter
    letter_command = MegaAgentCommand(
        user_id=user_id,
        command_type=CommandType.GENERATE,
        action="letter",
        payload={
            "document_type": DocumentType.LETTER,
            "content_data": {
                "recipient": "USCIS California Service Center",
                "sender": "Immigration Law Firm",
                "subject": "H-1B Petition Package - Multi-National Tech Company",
                "content": "We are submitting a comprehensive package of H-1B petitions for 25 highly skilled technology professionals from various countries. Each application demonstrates the specialized nature of their roles and the company's commitment to supporting these critical positions."
            },
            "case_id": case_response.result.get('case_id'),
            "approval_required": False
        }
    )

    letter_response = await mega_agent.handle_command(letter_command)
    print(f"‚úÖ Cover letter —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    print(f"   Document ID: {letter_response.result.get('document_id')}")
    print()

    print("4. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    mega_stats = await mega_agent.get_stats()
    health_check = await mega_agent.health_check()

    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"   –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {mega_stats.get('total_commands', 0)}")
    print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥: {mega_stats.get('command_stats', {})}")
    print(f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {mega_stats.get('registered_users', 0)}")
    print(f"   –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health_check.get('status', 'unknown')}")
    print()

    return {
        "case_id": case_response.result.get('case_id'),
        "document_id": letter_response.result.get('document_id'),
        "stats": mega_stats,
        "health": health_check
    }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ MEGA AGENT PRO - Complete Multi-Agent System Demonstration")
    print("=" * 70)
    print()

    try:
        # 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        case_id, doc_id = await demo_mega_agent_orchestration()

        # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ –∑–∞–¥–∞—á
        workflow_result = await demo_supervisor_task_orchestration()

        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        generated_doc = await demo_writer_agent_features()

        # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_result, consensus = await demo_validator_agent_capabilities()

        # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG –ø–æ–∏—Å–∫–∞
        search_results = await demo_rag_pipeline_search()

        # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration_results = await demo_full_workflow_integration()

        print("üéâ === Complete System Demo Results ===")
        print(f"‚úÖ MegaAgent Orchestration: Created case {case_id}, document {doc_id}")
        print(f"‚úÖ SupervisorAgent: Executed workflow with {len(workflow_result.results)} subtasks")
        print(f"‚úÖ WriterAgent: Generated document {generated_doc.document_id}")
        print(f"‚úÖ ValidatorAgent: Validation confidence {validation_result.confidence_score:.2f}")
        print(f"‚úÖ RAGPipelineAgent: Found {len(search_results.results)} search results")
        print(f"‚úÖ Full Integration: System health {integration_results['health']['status']}")
        print()
        print("üåü All agents successfully demonstrated!")
        print("üîó Multi-agent coordination and workflow integration working!")
        print("üìä Complete audit trail and memory integration functional!")

    except Exception as e:
        print(f"‚ùå Demo failed with error: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())